// 7894
[proc,skill_guide_data_cooking](int $int0, int $int1)(int, obj, string)
def_string $string0 = "";
if (%option_skill_guide = 0) {
    $string0 = "<col=6f0000>";
} else {
    $string0 = "<col=ffffff>";
}
switch_int ($int0) {
    case 0 :
        switch_int ($int1) {
            case 0 :
                return(-1, cooking_pot, "Cooking is a skill that lets you make all kinds of delicious food that will typically restore your Hitpoints, amongst providing other benefits.");
            case 1 :
                return(-1, shrimp, "At its most basic, Cooking can be done by simply taking raw meats and fish to either a fire or a range. You'll get better results overall if you use a range, though.");
            case 2 :
                return(-1, bread, "Some foods will require you to prepare your ingredients before you can cook them. For example, you first need to mix flour and water into a dough before you can bake them into bread.");
            case 3 :
                return(-1, lobster, "As your Cooking level increases, you'll get access to an increasing list of recipes. You'll also find that you accidentally burn your food less of the time as well.");
        }
    case 1 :
        switch_int ($int1) {
            case 0 :
                return(1, cooked_meat, "Meat");
            case 1 :
                return(1, xbows_sinew, "Members: Sinew<br>(made by drying beef or bear meat on a range)");
            case 2 :
                return(1, shrimp, "Shrimp");
            case 3 :
                return(1, cooked_chicken, "Chicken");
            case 4 :
                return(1, cooked_rabbit, "Members: Rabbit");
            case 5 :
                return(1, anchovies, "Anchovies");
            case 6 :
                return(1, sardine, "Sardine");
            case 7 :
                return(1, tbwt_poorly_cooked_karambwan, "Members: Karambwan");
            case 8 :
                return(1, ugthanki_kebab, "Members: Ugthanki kebab");
            case 9 :
                return(5, herring, "Herring");
            case 10 :
                return(10, mackerel, "Members: Mackerel");
            case 11 :
                return(11, spit_roasted_bird_meat, "Members: Roasted bird meat");
            case 12 :
                return(12, snail_corpse_cooked1, "Members: Thin snail");
            case 13 :
                return(15, trout, "Trout");
            case 14 :
                return(16, tbw_spider_on_stick_cooked, "Members: Spider");
            case 15 :
                return(16, spit_roasted_rabbit_meat, "Members: Roasted rabbit");
            case 16 :
                return(17, snail_corpse_cooked2, "Members: Lean snail");
            case 17 :
                return(18, cod, "Members: Cod");
            case 18 :
                return(20, pike, "Pike");
            case 19 :
                return(21, spit_roasted_beast_meat, "Members: Roasted beast meat");
            case 20 :
                return(21, hundred_pirate_giant_crab_meat_5, "Members: Giant crab meat");
            case 21 :
                return(22, snail_corpse_cooked3, "Members: Fat snail");
            case 22 :
                return(23, wildkebbit_cooked, "Members: Wild kebbit");
            case 23 :
                return(25, salmon, "Salmon");
            case 24 :
                return(28, mort_slimey_eel_cooked, "Members: Slimy eel");
            case 25 :
                return(30, tuna, "Tuna");
            case 26 :
                return(30, cooked_chompy, "Members: Roasted chompy");
            case 27 :
                return(30, cooked_lizard, "Members: Mossy Lizard");
            case 28 :
                return(30, bream_fish_cooked, "Members: Bream");
            case 29 :
                return(31, hundred_pirate_fishcake, "Members: Fishcakes");
            case 30 :
                return(31, larupia_cooked, "Members: Larupia");
            case 31 :
                return(32, barbkebbit_cooked, "Members: Barb-tailed kebbit");
            case 32 :
                return(35, hunting_fish_special, "Members: Rainbow fish");
            case 33 :
                return(35, forestry_ration, "Members: Forester's ration<br>(with 35 Woodcutting)");
            case 34 :
                return(38, cave_eel, "Members: Cave eel");
            case 35 :
                return(40, lobster, "Lobster");
            case 36 :
                return(41, 100_jubbly_meat_cooked, "Members: Jubbly");
            case 37 :
                return(41, graahk_cooked, "Members: Graahk");
            case 38 :
                return(43, bass, "Members: Bass");
            case 39 :
                return(45, swordfish, "Swordfish");
            case 40 :
                return(51, kyatt_cooked, "Members: Kyatt");
            case 41 :
                return(53, lava_eel, "Members: Lava eel");
            case 42 :
                return(59, fennecfox_cooked, "Members: Pyre fox");
            case 43 :
                return(62, monkfish, "Members: Monkfish");
            case 44 :
                return(68, antelopesun_cooked, "Members: Sunlight antelope");
            case 45 :
                return(72, snakeboss_eel, "Members: Dissect sacred eels");
            case 46 :
                return(80, shark, "Members: Shark");
            case 47 :
                return(82, seaturtle, "Members: Sea turtle");
            case 48 :
                return(82, dashingkebbit_cooked, "Members: Dashing kebbit");
            case 49 :
                return(84, anglerfish, "Members: Anglerfish");
            case 50 :
                return(90, dark_crab, "Members: Dark crab");
            case 51 :
                return(91, mantaray, "Members: Manta ray");
            case 52 :
                return(92, antelopemoon_cooked, "Members: Moonlight antelope");
        }
        return(-1, null, "");
    case 2 :
        switch_int ($int1) {
            case 0 :
                return(1, bread, "Bread");
            case 1 :
                return(58, pitta_bread, "Members: Pitta bread");
            case 2 :
                return(-1, invis_rod, "1. Pick some grain and take it to a windmill to make flour.");
            case 3 :
                return(-1, invis_rod, "2. Use a pot to collect the flour you have made.");
            case 4 :
                return(-1, invis_rod, "3. Fill a bucket or jug with water from a sink or fountain.");
            case 5 :
                return(-1, invis_rod, "4. Mix the flour and water to make some bread dough.");
            case 6 :
                return(-1, invis_rod, "5. Cook the dough by using it with a stove.");
        }
        return(-1, null, "");
    case 3 :
        switch_int ($int1) {
            case 0 :
                return(10, redberry_pie, "Redberry pie");
            case 1 :
                return(20, meat_pie, "Meat pie");
            case 2 :
                return(29, mud_pie, "Members: Mud pie");
            case 3 :
                return(30, apple_pie, "Apple pie");
            case 4 :
                return(34, garden_pie, "Members: Garden pie");
            case 5 :
                return(47, fish_pie, "Members: Fish pie");
            case 6 :
                return(52, botanical_pie, "Members: Botanical pie");
            case 7 :
                return(60, mushroom_pie, "Members: Mushroom pie");
            case 8 :
                return(70, admiral_pie, "Members: Admiral pie");
            case 9 :
                return(73, dragonfruit_pie, "Members: Dragonfruit pie");
            case 10 :
                return(85, wild_pie, "Members: Wild pie");
            case 11 :
                return(95, summer_pie, "Members: Summer pie");
            case 12 :
                return(-1, invis_rod, "To make a pie:");
            case 13 :
                return(-1, invis_rod, "1. Mix flour and water to make pastry dough.");
            case 14 :
                return(-1, invis_rod, "2. Place the dough in an empty pie dish.");
            case 15 :
                return(-1, invis_rod, "3. Use your choice of filling with the empty pie (refer to pie recipe book).");
            case 16 :
                return(-1, invis_rod, "4. Cook the pie by using it with a stove.");
        }
        return(-1, null, "");
    case 4 :
        switch_int ($int1) {
            case 0 :
                return(25, stew, "Stew");
            case 1 :
                return(60, curry, "Members: Curry");
            case 2 :
                return(-1, invis_rod, "To make stew:");
            case 3 :
                return(-1, invis_rod, "1. Obtain a bowl and fill it with water from a sink or fountain.");
            case 4 :
                return(-1, invis_rod, "2. Pick a potato and place it in the bowl.");
            case 5 :
                return(-1, invis_rod, "3. Cook some meat and place it in the bowl.");
            case 6 :
                return(-1, invis_rod, "4. Cook the stew by using it with a stove or fire.");
            case 7 :
                return(-1, invis_rod, "After completing Evil Dave's miniquest<br>from Recipe for Disaster, I can add<br>spices to cooked stew.");
            case 8 :
                return(-1, invis_rod, "To make curry: make uncooked stew as above. Before cooking, add some spices or 3 curry leaves.");
        }
        return(-1, null, "");
    case 5 :
        switch_int ($int1) {
            case 0 :
                return(35, plain_pizza, "Plain pizza");
            case 1 :
                return(45, meat_pizza, "Meat pizza");
            case 2 :
                return(55, anchovie_pizza, "Anchovy pizza");
            case 3 :
                return(65, pineapple_pizza, "Members: Pineapple pizza");
            case 4 :
                return(-1, invis_rod, "To make a pizza:");
            case 5 :
                return(-1, invis_rod, "1. Mix flour and water to make a pizza base.");
            case 6 :
                return(-1, invis_rod, "2. Add a tomato to the pizza.");
            case 7 :
                return(-1, invis_rod, "3. Add some cheese to the pizza.");
            case 8 :
                return(-1, invis_rod, "4. Cook the pizza by using it with a stove.");
            case 9 :
                return(-1, invis_rod, "5. Add your choice of topping to the pizza.");
        }
        return(-1, null, "");
    case 6 :
        switch_int ($int1) {
            case 0 :
                return(40, cake, "Cake");
            case 1 :
                return(50, chocolate_cake, "Chocolate cake");
            case 2 :
                return(-1, invis_rod, "To make a cake:");
            case 3 :
                return(-1, invis_rod, "1. Mix flour, eggs and milk together in a cake tin.");
            case 4 :
                return(-1, invis_rod, "2. Cook the cake by using it with a stove.");
            case 5 :
                return(-1, invis_rod, "3. Optional: Buy some chocolate and add it to the cake to make a chocolate cake.");
        }
        return(-1, null, "");
    case 7 :
        switch_int ($int1) {
            case 0 :
                return(35, jug_wine, "Wine");
            case 1 :
                return(65, wine_of_zamorak, "Members: Wine of Zamorak");
            case 2 :
                return(-1, invis_rod, "To make wine:");
            case 3 :
                return(-1, invis_rod, "1. Fill a jug with water.");
            case 4 :
                return(-1, invis_rod, "2. Use grapes with the jug of water.");
            case 5 :
                return(-1, invis_rod, "3. Wait until the wine ferments.");
            case 6 :
                return(-1, invis_rod, "Wine will ferment when left in<br>your inventory or the bank.");
        }
        return(-1, null, "");
    case 8 :
        switch_int ($int1) {
            case 0 :
                return(20, cup_of_nettletea, "Nettle tea");
            case 1 :
                return(36, cup_damiana_tea, "Damiana tea");
            case 2 :
                return(-1, invis_rod, "To make tea:");
            case 3 :
                return(-1, invis_rod, "1. Fill a bowl with water.");
            case 4 :
                return(-1, invis_rod, "2. Add the relevant ingredient (nettles or damiana leaves) into the bowl of water.");
            case 5 :
                return(-1, invis_rod, "3. Boil the water on a range or a fire.");
            case 6 :
                return(-1, invis_rod, "4. Transfer the bowl of tea into a cup.");
            case 7 :
                return(-1, invis_rod, "5. If desired, add a bucket of milk to the tea.");
        }
        return(-1, null, "");
    case 9 :
        switch_int ($int1) {
            case 0 :
                return(14, cider, "Cider<br>4 Apple mush");
            case 1 :
                return(19, dwarven_stout, "Dwarven Stout<br>4 Hammerstone hops");
            case 2 :
                return(24, asgarnian_ale, "Asgarnian Ale<br>4 Asgarnian hops");
            case 3 :
                return(29, greenmans_ale, "Greenman's Ale<br>4 Harralander leaves");
            case 4 :
                return(34, wizards_mind_bomb, "Wizard's Mind Bomb<br>4 Yanillian hops");
            case 5 :
                return(39, dragon_bitter, "Dragon Bitter<br>4 Krandorian hops");
            case 6 :
                return(44, moonlight_mead, "Moonlight Mead<br>4 Bittercap mushrooms");
            case 7 :
                return(49, axemans_folly, "Axeman's Folly<br>1 Oak root");
            case 8 :
                return(54, chefs_delight, "Chef's Delight<br>4 Portions of chocolate dust");
            case 9 :
                return(59, slayers_respite, "Slayer's Respite<br>4 Wildblood hops");
        }
        return(-1, null, "");
    case 10 :
        switch_int ($int1) {
            case 0 :
                return(7, potato_baked, "Baked potato");
            case 1 :
                return(9, bowl_chilli, "Spicy sauce (topping ingredient)");
            case 2 :
                return(11, "bowl_chilli+carne", "Chilli con carne (topping)");
            case 3 :
                return(13, bowl_egg_scrambled, "Scrambled egg (topping ingredient)");
            case 4 :
                return(23, "bowl_egg+tomato", "Scrambled egg and tomato (topping)");
            case 5 :
                return(28, sweetcorn_cooked, "Sweetcorn");
            case 6 :
                return(39, potato_butter, "Baked potato with butter");
            case 7 :
                return(41, "potato_chilli+carne", "Baked potato with chilli con carne");
            case 8 :
                return(42, bowl_onion_fried, "Fried onion (topping ingredient)");
            case 9 :
                return(46, bowl_mushroom_fried, "Fried mushroom (topping ingredient)");
            case 10 :
                return(47, potato_cheese, "Baked potato with butter and cheese");
            case 11 :
                return(51, "potato_egg+tomato", "Baked potato with egg and tomato");
            case 12 :
                return(57, "bowl_mushroom+onion", "Fried mushroom and onion (topping)");
            case 13 :
                return(64, "potato_mushroom+onion", "Baked potato with mushroom and onion");
            case 14 :
                return(67, "bowl_tuna+sweetcorn", "Tuna and sweetcorn (topping)");
            case 15 :
                return(68, "potato_tuna+sweetcorn", "Baked potato with tuna and sweetcorn");
            case 16 :
                return(-1, invis_rod, "To make baked potatoes with toppings:");
            case 17 :
                return(-1, invis_rod, "1. Bake the potato on a range.");
            case 18 :
                return(-1, invis_rod, "2. Add some butter.");
            case 19 :
                return(-1, invis_rod, "3. If needed, combine topping ingredients by chopping them into a bowl.");
            case 20 :
                return(-1, invis_rod, "Ingredients for toppings:");
            case 21 :
                return(-1, invis_rod, "1. Chilli con carne: meat & spicy sauce (made from garlic and gnome spice)");
            case 22 :
                return(-1, invis_rod, "2. Egg and tomato: scrambled egg & tomato");
            case 23 :
                return(-1, invis_rod, "3. Mushroom and onion: fried bittercap mushroom & fried onion");
            case 24 :
                return(-1, invis_rod, "4. Tuna and sweetcorn: tuna & cooked sweetcorn");
        }
        return(-1, null, "");
    case 11 :
        switch_int ($int1) {
            case 0 :
                return(21, pot_of_cream, "Cream");
            case 1 :
                return(38, pot_of_butter, "Butter");
            case 2 :
                return(48, cheese, "Cheese");
            case 3 :
                return(-1, invis_rod, "To make dairy products:");
            case 4 :
                return(-1, invis_rod, "1. Get a bucket of milk, a pot of cream or a pot of butter.");
            case 5 :
                return(-1, invis_rod, "2. Use the milk, cream or butter in a churn.");
            case 6 :
                return(-1, invis_rod, "3. Milk can be churned into cream, then into butter, then into cheese.");
        }
        return(-1, null, "");
    case 12 :
        switch_int ($int1) {
            case 0 :
                return(6, fruit_blast, "Fruit Blast");
            case 1 :
                return(8, pineapple_punch, "Pineapple Punch");
            case 2 :
                return(10, toad_crunchies, "Toad crunchies");
            case 3 :
                return(12, spicy_crunchies, "Spicy crunchies");
            case 4 :
                return(14, worm_crunchies, "Worm crunchies");
            case 5 :
                return(16, chocchip_crunchies, "Chocolate chip crunchies");
            case 6 :
                return(18, wizard_blizzard, "Wizard Blizzard");
            case 7 :
                return(20, sgg, "Short Green Guy (SGG)");
            case 8 :
                return(25, fruit_batta, "Fruit batta");
            case 9 :
                return(26, toad_batta, "Toad batta");
            case 10 :
                return(27, worm_batta, "Worm batta");
            case 11 :
                return(28, vegetable_batta, "Vegetable batta");
            case 12 :
                return(29, "cheese+tom_batta", "Cheese and tomato batta");
            case 13 :
                return(30, worm_hole, "Worm hole");
            case 14 :
                return(32, drunk_dragon, "Drunk Dragon");
            case 15 :
                return(33, chocolate_saturday, "Chocolate Saturday");
            case 16 :
                return(35, veg_ball, "Vegetable ball");
            case 17 :
                return(37, blurberry_special, "Blurberry Special");
            case 18 :
                return(40, tangled_toads_legs, "Tangled toads' legs");
            case 19 :
                return(42, chocolate_bomb, "Chocolate bomb");
        }
        return(-1, null, "");
    case 13 :
        switch_int ($int1) {
            case 0 :
                return(1, raids_fish0_cooked, "Members: Chambers of Xeric - Pysk fish");
            case 1 :
                return(1, raids_bat0_cooked, "Members: Chambers of Xeric - Guanic bat");
            case 2 :
                return(7, guppy, "Ritual Offering - Guppy");
            case 3 :
                return(15, raids_fish1_cooked, "Members: Chambers of Xeric - Suphi fish");
            case 4 :
                return(15, raids_bat1_cooked, "Members: Chambers of Xeric - Prael bat");
            case 5 :
                return(20, cavefish, "Ritual Offering - Cavefish");
            case 6 :
                return(30, raids_fish2_cooked, "Members: Chambers of Xeric - Leckish fish");
            case 7 :
                return(30, raids_bat2_cooked, "Members: Chambers of Xeric - Giral bat");
            case 8 :
                return(33, tetra, "Ritual Offering - Tetra");
            case 9 :
                return(45, raids_fish3_cooked, "Members: Chambers of Xeric - Brawk fish");
            case 10 :
                return(45, raids_bat3_cooked, "Members: Chambers of Xeric - Phluxia bat");
            case 11 :
                return(46, catfish, "Members: Ritual Offering - Catfish");
            case 12 :
                return(60, raids_fish4_cooked, "Members: Chambers of Xeric - Mycil fish");
            case 13 :
                return(60, raids_bat4_cooked, "Members: Chambers of Xeric - Kryket bat");
            case 14 :
                return(75, raids_fish5_cooked, "Members: Chambers of Xeric - Roqed fish");
            case 15 :
                return(75, raids_bat5_cooked, "Members: Chambers of Xeric - Murng bat");
            case 16 :
                return(90, raids_fish6_cooked, "Members: Chambers of Xeric - Kyren fish");
            case 17 :
                return(90, raids_bat6_cooked, "Members: Chambers of Xeric - Psykk bat");
        }
        return(-1, null, "");
}
return(-1, null, "");
