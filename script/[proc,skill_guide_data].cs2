// 661
[proc,skill_guide_data](int $int0, int $int1, int $int2)(int, obj, string)
def_string $string0 = "";
if (%option_skill_guide = 0) {
    $string0 = "<col=6f0000>";
} else {
    $string0 = "<col=ffffff>";
}
switch_int ($int0) {
    case 1 :
        return(~skill_guide_data_attack($int1, $int2));
    case 2 :
        return(~skill_guide_data_strength($int1, $int2));
    case 5 :
        return(~skill_guide_data_defence($int1, $int2));
    case 3 :
        if ($int1 = 0) {
            switch_int ($int2) {
                case 0 :
                    return(-1, shortbow, "Your Ranged level determines how accurate you are with ranged weapons, as well as how much damage they do. A higher Ranged level will result in more hits that do more damage.");
                case 1 :
                    return(-1, mithril_arrow, "Most ranged weapons will need a specific kind of ammunition to go with them; for instance, bows will need arrows and crossbows will need bolts.");
                case 2 :
                    return(-1, xbows_crossbow_runite, "As your Ranged level increases, you will also get access to more powerful weapons and ammunition. Typically, each ranged weapon can only handle ammo up to a certain level; for instance, an oak bow can only fire bronze, iron or steel arrows, but not mithril.");
            }
        }
        if ($int1 = 1) {
            switch_int ($int2) {
                case 0 :
                    return(1, shortbow, "Standard bows<br> Ammo: Arrows up to iron");
                case 1 :
                    return(5, oak_shortbow, "Oak bows<br> Ammo: Arrows up to steel");
                case 2 :
                    return(20, willow_shortbow, "Willow bows<br> Ammo: Arrows up to mithril");
                case 3 :
                    return(30, maple_shortbow, "Maple bows<br> Ammo: Arrows up to adamant");
                case 4 :
                    return(30, zogre_bow, "Members: Ogre composite bows<br> Ammo: 'Brutal' arrows up to rune");
                case 5 :
                    return(40, yew_shortbow, "Members: Yew bows<br> Ammo: Arrows up to rune");
                case 6 :
                    return(50, magic_shortbow, "Members: Magic bows<br> Ammo: Arrows up to amethyst");
                case 7 :
                    return(50, rat_bone_bow, "Members: Bone shortbow<br> Ammo: Arrows up to amethyst");
                case 8 :
                    return(50, daganoth_cave_magic_shortbow, "Members: Seerculls<br> Ammo: Arrows up to amethyst");
                case 9 :
                    return(60, darkbow, "Members: Dark bows<br> Ammo: Arrows up to dragon");
                case 10 :
                    return(60, wild_cave_bow_charged, "Members: Craw's bow<br> Ammo: None");
                case 11 :
                    return(65, trail_ranger_bow, "Members: 3rd age bow<br> Ammo: Arrows up to dragon");
                case 12 :
                    return(70, crystal_bow, "Members: Crystal bows (with 50 Agility)<br> Ammo: None");
                case 13 :
                    return(70, wild_cave_webweaver_charged, "Members: Webweaver bow<br> Ammo: None");
                case 14 :
                    return(77, scorching_bow, "Members: Scorching bows<br> Ammo: Arrows up to dragon");
                case 15 :
                    return(80, bow_of_faerdhinen, "Members: Bow of Faerdhinen (with 70 Agility)<br> Ammo: None");
                case 16 :
                    return(80, venator_bow, "Members: Venator bow<br> Ammo: Arrows up to dragon");
                case 17 :
                    return(85, twisted_bow, "Members: Twisted bow<br> Ammo: Arrows up to dragon");
            }
            return(-1, null, "");
        }
        if ($int1 = 2) {
            switch_int ($int2) {
                case 0 :
                    return(1, bronze_knife, "Bronze items");
                case 1 :
                    return(1, iron_knife, "Iron items");
                case 2 :
                    return(5, steel_knife, "Steel items");
                case 3 :
                    return(10, black_knife, "Black items");
                case 4 :
                    return(20, mithril_knife, "Mithril items");
                case 5 :
                    return(30, adamant_knife, "Adamantite items");
                case 6 :
                    return(40, rune_knife, "Rune items");
                case 7 :
                    return(45, chinchompa_captured, "Chinchompas");
                case 8 :
                    return(50, amethyst_dart, "Amethyst darts");
                case 9 :
                    return(55, chinchompa_big_captured, "Carnivorous chinchompas");
                case 10 :
                    return(55, hg_hunter_spear, "Hunter's Spears<br> (with 30 Strength)");
                case 11 :
                    return(60, dragon_dart, "Dragon darts");
                case 12 :
                    return(60, dragon_knife, "Dragon knives");
                case 13 :
                    return(60, tzhaar_throwingring, "TokTz-Xil-Ul");
                case 14 :
                    return(61, dragon_thrownaxe, "Dragon thrownaxes");
                case 15 :
                    return(65, chinchompa_black, "Black chinchompas");
                case 16 :
                    return(75, eclipse_atlatl, "Eclipse Atlatl (With 50 Strength and 50 Attack)<br> Ammo: Atlatl darts");
                case 17 :
                    return(75, toxic_blowpipe, "Toxic blowpipe");
                case 18 :
                    return(75, tonalztics_of_ralos_charged, "Tonalztics of Ralos");
            }
            return(-1, null, "");
        }
        if ($int1 = 3) {
            switch_int ($int2) {
                case 0 :
                    return(1, crossbow, "Crossbow<br> Ammo: Bronze crossbow bolts");
                case 1 :
                    return(1, phoenix_crossbow, "Phoenix crossbow<br> Ammo: Bronze crossbow bolts");
                case 2 :
                    return(1, xbows_crossbow_bronze, "Members: Bronze crossbow<br> Ammo: Bronze crossbow bolts");
                case 3 :
                    return(16, xbows_crossbow_blurite, "Members: Blurite crossbow<br> Ammo: Bolts up to blurite");
                case 4 :
                    return(26, xbows_crossbow_iron, "Members: Iron crossbow<br> Ammo: Bolts up to iron");
                case 5 :
                    return(28, dttd_bone_crossbow, "Members: Dorgeshuun crossbow<br> Ammo: Bolts up to iron");
                case 6 :
                    return(31, xbows_crossbow_steel, "Members: Steel crossbow<br> Ammo: Bolts up to steel");
                case 7 :
                    return(36, xbows_crossbow_mithril, "Members: Mithril crossbow<br> Ammo: Bolts up to mithril");
                case 8 :
                    return(46, xbows_crossbow_adamantite, "Members: Adamantite crossbow<br> Ammo: Bolts up to adamant");
                case 9 :
                    return(50, hunting_crossbow, "Members: Hunters' crossbow<br> Ammo: Kebbit bolts");
                case 10 :
                    return(61, xbows_crossbow_runite, "Members: Runite crossbow<br> Ammo: Bolts up to runite");
                case 11 :
                    return(64, xbows_crossbow_dragon, "Members: Dragon crossbow<br> Ammo: Bolts up to dragon");
                case 12 :
                    return(66, hunting_crossbow_sunlight, "Members: Sunlight hunters' crossbow<br> Ammo: Antler bolts.");
                case 13 :
                    return(70, dragonhunter_xbow, "Members: Dragon hunter crossbow<br> Ammo: Bolts up to dragon");
                case 14 :
                    return(70, acb, "Members: Armadyl crossbow<br> Ammo: Bolts up to dragon");
                case 15 :
                    return(70, barrows_karil_weapon, "Members: Karil's crossbow");
                case 16 :
                    return(80, zaryte_xbow, "Members: Zaryte crossbow<br> Ammo: Bolts up to dragon");
            }
            return(-1, null, "");
        }
        if ($int1 = 4) {
            switch_int ($int2) {
                case 0 :
                    return(1, leather_armour, "Plain leather items");
                case 1 :
                    return(1, hardleather_body, "Hard leather body<br> (with 10 Defence)");
                case 2 :
                    return(20, studded_body, "Studded leather body<br> (with 20 Defence)");
                case 3 :
                    return(20, studded_chaps, "Studded leather chaps");
                case 4 :
                    return(20, coif, "Coif");
                case 5 :
                    return(20, leather_shield, "Members: Hard leather shield <br> (with 10 Defence)");
                case 6 :
                    return(25, dorgesh_frog_armour_top, "Members: Frog-leather <br> (with 25 Defence)");
                case 7 :
                    return(30, snakeskin_body, "Members: Snakeskin armour<br> (with 30 Defence)");
                case 8 :
                    return(30, snakeskin_shield, "Members: Snakeskin shield <br> (with 30 Defence)");
                case 9 :
                    return(30, anma_30_reward, "Members: Ava's attractor<br> (after Animal Magnetism)");
                case 10 :
                    return(40, boots_ranger, "Members: Ranger boots");
                case 11 :
                    return(40, robinhoodhat, "Members: Robin Hood hat");
                case 12 :
                    return(40, ranger_tunic, "Members: Rangers' tunic");
                case 13 :
                    return(40, ranger_gloves, "Members: Ranger gloves");
                case 14 :
                    return(40, rangers_tights, "Members: Rangers' tights");
                case 15 :
                    return(40, dagganoth_ranged_body, "Members: Spined armour<br> (after The Fremennik Trials, with 40 Defence)");
                case 16 :
                    return(40, dragon_vambraces, "Green dragonhide vambraces");
                case 17 :
                    return(40, dragonhide_chaps, "Green dragonhide chaps");
                case 18 :
                    return(40, dragonhide_body, "Green dragonhide body<br> (with 40 Defence)");
                case 19 :
                    return(40, green_dhide_shield, "Members: Green dragonhide shield <br> (with 40 Defence)");
                case 20 :
                    return(42, pest_void_knight_top, "Members: Void Knight equipment<br>(with 42 combat stats and 22 Prayer)");
                case 21 :
                    return(50, anma_50_reward, "Members: Ava's accumulator<br> (after Animal Magnetism)");
                case 22 :
                    return(50, blue_dragon_vambraces, "Members: Blue dragonhide vambraces");
                case 23 :
                    return(50, blue_dragonhide_chaps, "Members: Blue dragonhide chaps");
                case 24 :
                    return(50, blue_dragonhide_body, "Members: Blue dragonhide body<br> (with 40 Defence)");
                case 25 :
                    return(50, blue_dhide_shield, "Members: Blue dragonhide shield <br> (with 40 Defence)");
                case 26 :
                    return(60, barbassault_penance_ranger_legs, "Members: Penance skirt<br> (with 40 Defence)");
                case 27 :
                    return(60, red_dragon_vambraces, "Members: Red dragonhide vambraces");
                case 28 :
                    return(60, red_dragonhide_chaps, "Members: Red dragonhide chaps");
                case 29 :
                    return(60, red_dragonhide_body, "Members: Red dragonhide body<br> (with 40 Defence)");
                case 30 :
                    return(60, red_dhide_shield, "Members: Red dragonhide shield <br> (with 40 Defence)");
                case 31 :
                    return(60, hide_legs, "Members: Mixed hide legs");
                case 32 :
                    return(60, hide_top, "Members: Mixed hide top, cape, and boots<br> (with 50 Defence)");
                case 33 :
                    return(65, trail_ranger_torso, "Members: 3rd age range armour<br> (with 45 Defence)");
                case 34 :
                    return(70, avas_assembler, "Members: Ava's Assembler<br> (after Dragon Slayer II)");
                case 35 :
                    return(70, black_dragon_vambraces, "Members: Black dragonhide vambraces");
                case 36 :
                    return(70, black_dragonhide_chaps, "Members: Black dragonhide chaps");
                case 37 :
                    return(70, black_dragonhide_body, "Members: Black dragonhide body<br> (with 40 Defence)");
                case 38 :
                    return(70, black_dhide_shield, "Members: Black dragonhide shield<br> (with 40 Defence)");
                case 39 :
                    return(70, blessed_dhide_shield_guthix, "Members: God dragonhide shields<br> (with 40 Defence)");
                case 40 :
                    return(70, trail_zamorak_chest, "Members: God dragonhide armour<br> (with 40 Defence)");
                case 41 :
                    return(70, huey_vambraces, "Members: <oc_name(huey_vambraces)>");
                case 42 :
                    return(70, huey_chaps, "Members: <oc_name(huey_chaps)>");
                case 43 :
                    return(70, huey_body, "Members: <oc_name(huey_body)><br> (with 40 Defence)");
                case 44 :
                    return(70, huey_coif, "Members: <oc_name(huey_coif)><br> (with 40 Defence)");
                case 45 :
                    return(70, armadyl_helmet, "Members: Armadyl armour<br> (with 70 Defence)");
                case 46 :
                    return(70, barrows_karil_body, "Members: Karil's leather armour<br> (with 70 Defence)");
                case 47 :
                    return(70, dragonfire_ward, "Members: Dragonfire ward<br>(with 75 Defence)");
                case 48 :
                    return(70, boots_of_brimstone, "Members: Boots of brimstone<br>(with 70 Defence and Magic)");
                case 49 :
                    return(75, dizanas_quiver_charged, "Dizana's Quiver<br>Ammo storage: Bolts or Arrows");
                case 50 :
                    return(75, eclipse_moon_helm, "Members: Eclipse set<br> (with 50 Defence)");
                case 51 :
                    return(75, pegasian_boots, "Members: Pegasian boots<br> (with 75 Defence)");
                case 52 :
                    return(75, twisted_buckler, "Members: Twisted buckler<br> (with 75 Defence)");
                case 53 :
                    return(80, zaryte_vambraces, "Members: Zaryte vambraces<br> (with 45 Defence)");
                case 54 :
                    return(80, masori_body, "Members: Masori armour<br> (with 30 Defence)");
            }
            return(-1, null, "");
        }
        if ($int1 = 5) {
            if ($int2 = 0) {
                return(42, pest_void_knight_mace, "Void Knight equipment<br>(with 42 combat stats and 22 Prayer)");
            }
            if ($int2 = 1) {
                return(65, light_ballista, "Light ballista<br> Ammo: All Javelins");
            }
            if ($int2 = 2) {
                return(75, heavy_ballista, "Heavy ballista (after Monkey Madness II)<br> Ammo: All Javelins");
            }
            return(-1, null, "");
        }
        if ($int1 = 6) {
            switch_int ($int2) {
                case 0 :
                    return(19, agility_climb, "Scale Falador wall<br>(with 11 Agility and 37 Strength)");
                case 1 :
                    return(21, agility_climb, "Scale Yanille wall<br>(with 39 Agility and 38 Strength)");
                case 2 :
                    return(24, agility_climb, "Scale Observatory cliff (after Observatory quest)<br>(with 23 Agility and 28 Strength)");
                case 3 :
                    return(35, agility_climb, "Scale the Catherby cliff<br>(with 32 Agility and 35 Strength)");
                case 4 :
                    return(37, agility_balance, "Cross the River Lum to Al Kharid<br>(with 8 Agility and 19 Strength)");
                case 5 :
                    return(39, agility_balance, "Escape from the water obelisk island<br>(with 36 Agility and 22 Strength)");
                case 6 :
                    return(42, agility_balance, "Karamja, south of the volcano<br>(with 53 Agility and 21 Strength)");
                case 7 :
                    return(62, agility_jump, "Hallowed Sepulchre - Grapple swing");
                case 8 :
                    return(70, agility_balance, "Cross cave south of Dorgesh-Kaan<br>(with 70 Agility and 70 Strength)");
            }
            return(-1, null, "");
        }
        if ($int1 = 7) {
            return(~skill_guide_salamanders($int2));
        }
        return(-1, null, "");
    case 7 :
        return(~skill_guide_data_prayer($int1, $int2));
    case 4 :
        return(~skill_guide_data_magic($int1, $int2));
    case 6 :
        if ($int1 = 0) {
            switch_int ($int2) {
                case 0 :
                    return(-1, heartcrystal, "Hitpoints are used to tell you how healthy your character is. A character who reaches 0 Hitpoints has died, but will reappear in their chosen respawn location (normally Lumbridge).");
                case 1 :
                    return(-1, lobster, "As with any skill, you will restore 1 missing Hitpoint every minute, but the best way of recovering Hitpoints is by eating food.");
                case 2 :
                    return(-1, invis_rod, "If you see any red 'hit splats' during combat, the number shown corresponds to the number of Hitpoints lost as a result of that strike.");
                case 3 :
                    return(-1, invis_rod, "Blue hit splats mean no damage has been dealt.");
                case 4 :
                    return(-1, invis_rod, "Green hit splats are poison damage.");
                case 5 :
                    return(-1, invis_rod, "Teal hit splats are venom damage. (Members)");
                case 6 :
                    return(-1, invis_rod, "Orange hit splats are disease damage. (Members)");
                case 7 :
                    return(-1, invis_rod, "Dark purple hit splats are corruption damage. (Members)");
            }
        } else if ($int1 = 1) {
            switch_int ($int2) {
                case 0 :
                    return(-1, trail_sweets, "Purple Sweets: Restores 1-3 Hitpoints<br>(Members)");
                case 1 :
                    return(-1, anchovies, "Anchovies: Restores 1 Hitpoint");
                case 2 :
                    return(-1, shrimp, "Shrimp: Restores 3 Hitpoints");
                case 3 :
                    return(-1, cooked_chicken, "Cooked chicken: Restores 3 Hitpoints");
                case 4 :
                    return(-1, sardine, "Sardine: Restores 3 Hitpoints");
                case 5 :
                    return(-1, cooked_meat, "Cooked meat: Restores 3 Hitpoints");
                case 6 :
                    return(-1, cooked_mystery_meat, "Cooked mystery meat: Restores 5 Hitpoints");
                case 7 :
                    return(-1, bread, "Bread: Restores 5 Hitpoints");
                case 8 :
                    return(-1, herring, "Herring: Restores 5 Hitpoints");
                case 9 :
                    return(-1, cooked_rabbit, "Cooked Rabbit: Restores 5 Hitpoints<br>(Members)");
                case 10 :
                    return(-1, bim_steak_sandwich, "Steak Sandwich: Restores 6 Hitpoints");
                case 11 :
                    return(-1, mackerel, "Mackerel: Restores 6 Hitpoints<br>(Members)");
                case 12 :
                    return(-1, botanical_pie, "Botanical Pie: Restores 6 Hitpoints<br>(Members)");
                case 13 :
                    return(-1, mort_slimey_eel_cooked, "Slimy Eel: Restores 6-10 Hitpoints<br>(Members)");
                case 14 :
                    return(-1, trout, "Trout: Restores 7 Hitpoints");
                case 15 :
                    return(-1, cod, "Cod: Restores 7 Hitpoints<br>(Members)");
                case 16 :
                    return(-1, spit_roasted_rabbit_meat, "Roast Rabbit: Restores 7 Hitpoints<br>(Members)");
                case 17 :
                    return(-1, cave_eel, "Cave Eel: Restores 7-11 Hitpoints<br>(Members)");
                case 18 :
                    return(-1, pike, "Pike: Restores 8 Hitpoints");
                case 19 :
                    return(-1, wildkebbit_cooked, "Wild kebbit: Restores 8 Hitpoints<br>(Members)");
                case 20 :
                    return(-1, salmon, "Salmon: Restores 9 Hitpoints");
                case 21 :
                    return(-1, redberry_pie, "Redberry pie: Restores 9 Hitpoints");
                case 22 :
                    return(-1, tuna, "Tuna: Restores 10 Hitpoints");
                case 23 :
                    return(-1, hundred_pirate_giant_crab_meat, "Crab meat: Restores 10 Hitpoints<br>(Members)");
                case 24 :
                    return(-1, hundred_pirate_fishcake, "Cooked fishcake: Restores 11 Hitpoints<br>(Members)");
                case 25 :
                    return(-1, jug_wine, "Jug of wine: Restores 11 Hitpoints");
                case 26 :
                    return(-1, meat_pie, "Meat pie: Restores 11 Hitpoints");
                case 27 :
                    return(-1, lava_eel, "Lava Eel: Restores 11 Hitpoints<br>(Members)");
                case 28 :
                    return(-1, larupia_cooked, "Larupia: Restores 11 Hitpoints<br>(Members)");
                case 29 :
                    return(-1, garden_pie, "Garden pie: Restores 12 Hitpoints<br>(Members)");
                case 30 :
                    return(-1, fish_pie, "Fish pie: Restores 12 Hitpoints<br>(Members)");
                case 31 :
                    return(-1, cake, "Cake: Restores 12 Hitpoints");
                case 32 :
                    return(-1, lobster, "Lobster: Restores 12 Hitpoints");
                case 33 :
                    return(-1, barbkebbit_cooked, "Barb-tailed kebbit: Restores 12 Hitpoints<br>(Members)");
                case 34 :
                    return(-1, bass, "Bass: Restores 13 Hitpoints<br>(Members)");
                case 35 :
                    return(-1, swordfish, "Swordfish: Restores 14 Hitpoints");
                case 36 :
                    return(-1, plain_pizza, "Plain pizza: Restores 14 Hitpoints");
                case 37 :
                    return(-1, apple_pie, "Apple pie: Restores 14 Hitpoints");
                case 38 :
                    return(-1, potato_butter, "Potato with butter: Restores 14 Hitpoints<br>(Members)");
                case 39 :
                    return(-1, "potato_chilli+carne", "Chilli Potato: Restores 14 Hitpoints<br>(Members)");
                case 40 :
                    return(-1, graahk_cooked, "Graahk: Restores 14 Hitpoints<br>(Members)");
                case 41 :
                    return(-1, chocolate_cake, "Chocolate Cake: Restores 15 Hitpoints");
                case 42 :
                    return(-1, monkfish, "Monkfish: Restores 16 Hitpoints<br>(Members)");
                case 43 :
                    return(-1, admiral_pie, "Admiral pie: Restores 16 Hitpoints<br>(Members)");
                case 44 :
                    return(-1, meat_pizza, "Meat pizza: Restores 16 Hitpoints");
                case 45 :
                    return(-1, potato_cheese, "Potato with cheese: Restores 16 Hitpoints<br>(Members)");
                case 46 :
                    return(-1, "potato_egg+tomato", "Egg Potato: Restores 16 Hitpoints<br>(Members)");
                case 47 :
                    return(-1, kyatt_cooked, "Kyatt: Restores 17 Hitpoints<br>(Members)");
                case 48 :
                    return(-1, tbwt_cooked_karambwan, "Cooked karambwan: Restores 18 Hitpoints<br>(Members)");
                case 49 :
                    return(-1, anchovie_pizza, "Anchovy pizza: Restores 18 Hitpoints");
                case 50 :
                    return(-1, ugthanki_kebab, "Ugthanki kebab: Restores 19 Hitpoints<br>(Members)");
                case 51 :
                    return(-1, fennecfox_cooked, "Pyre fox: Restores 19 Hitpoints<br>(Members)");
                case 52 :
                    return(-1, shark, "Shark: Restores 20 Hitpoints<br>(Members)");
                case 53 :
                    return(-1, "potato_mushroom+onion", "Mushroom Potato: Restores 20 Hitpoints<br>(Members)");
                case 54 :
                    return(-1, seaturtle, "Sea Turtle: Restores 21 Hitpoints<br>(Members)");
                case 55 :
                    return(-1, antelopesun_cooked, "Sunlight antelope: Restores 21 Hitpoints<br>(Members)");
                case 56 :
                    return(-1, mantaray, "Manta Ray: Restores 22 Hitpoints<br>(Members)");
                case 57 :
                    return(-1, dark_crab, "Dark Crab: Restores 22 Hitpoints<br>(Members)");
                case 58 :
                    return(-1, "potato_tuna+sweetcorn", "Tuna Potato: Restores 22 Hitpoints<br>(Members)");
                case 59 :
                    return(-1, wild_pie, "Wild pie: Restores 22 Hitpoints<br>(Members)");
                case 60 :
                    return(-1, summer_pie, "Summer pie: Restores 22 Hitpoints<br>(Members)");
                case 61 :
                    return(-1, pineapple_pizza, "Pineapple pizza: Restores 22 Hitpoints<br>(Members)");
                case 62 :
                    return(-1, dashingkebbit_cooked, "Dashing kebbit: Restores 23 Hitpoints and 10 Run Energy<br>(Members)");
                case 63 :
                    return(-1, antelopemoon_cooked, "Moonlight antelope: Restores 26 Hitpoints and cures 1 level of poison<br>(Members)");
                case 64 :
                    return(-1, anglerfish, "Anglerfish: Restores Hitpoints based on your Hitpoints level up to a maximum of 22 - can boost beyond your level<br>(Members)");
                case 65 :
                    return(-1, 3dosepotionofsaradomin, "Saradomin brew: Restores 15% of your Hitpoints level plus 2 - can boost beyond your level<br>(Members)");
            }
        } else if ($int1 = 2) {
            switch_int ($int2) {
                case 0 :
                    return(42, pest_void_knight_top, "Void Knight equipment<br>(with 42 combat stats and 22 Prayer)");
                case 1 :
                    return(50, nightmare_staff, "Nightmare Staff (without orb)<br> (with <tostring(72)> Magic)");
                case 2 :
                    return(50, nightmare_staff_harmonised, "Nightmare Staff (with orb)<br> (with <tostring(82)> Magic)");
                case 3 :
                    return(75, zenyte_ring_enchanted, "Enchanted zenyte jewellery");
                case 4 :
                    return(90, amulet_of_rancour, "Amulet of Rancour");
            }
        }
        return(-1, null, "");
    case 8 :
        return(~skill_guide_data_agility($int1, $int2));
    case 9 :
        switch_int ($int1) {
            case 0 :
                switch_int ($int2) {
                    case 0 :
                        return(-1, 3dose1attack, "You must complete the Druidic Ritual quest before you can use Herblore.");
                    case 1 :
                        return(-1, eye_of_newt, "Herblore allows you to make potions with herbs and ingredients found across Gielinor.");
                    case 2 :
                        return(-1, unidentified_guam, "To make a potion, you first need to clean a grimy herb, then combine it with a vial of water to make an unfinished potion. You can then add the secondary ingredient(s) to complete the potion.");
                }
            case 1 :
                switch_int ($int2) {
                    case 0 :
                        return(-1, invis_rod, "You must complete the Druidic Ritual quest before you can use Herblore.");
                    case 1 :
                        return(3, eye_of_newt, "Attack potion<br>Guam leaf & eye of newt");
                    case 2 :
                        return(5, unicorn_horn_dust, "Anti-poison potion<br>Marrentill & ground unicorn horn");
                    case 3 :
                        return(8, rogues_purse, "Relicym's balm");
                    case 4 :
                        return(12, limpwurt_root, "Strength potion<br>Tarromin & limpwurt root");
                    case 5 :
                        return(15, ashes, "Serum 207<br>Tarromin & ashes");
                    case 6 :
                        return(19, salamander_tar_green, "Guam tar<br>Guam leaf & swamp tar");
                    case 7 :
                        return(22, fossil_volcanic_ash, "Compost potion<br>Harralander & volcanic ash");
                    case 8 :
                        return(22, red_spiders_eggs, "Stat restore potion<br>Harralander & red spiders' eggs");
                    case 9 :
                        return(22, garlic, "Guthix balance potion<br>Restore potion, garlic & silver dust");
                    case 10 :
                        return(26, chocolate_dust, "Energy potion<br>Harralander & chocolate dust");
                    case 11 :
                        return(30, white_berries, "Defence potion<br>Ranarr weed & white berries");
                    case 12 :
                        return(31, salamander_tar_orange, "Marrentill tar<br>Marrentill & swamp tar");
                    case 13 :
                        return(34, toads_legs, "Agility potion<br>Toadflax & toad legs");
                    case 14 :
                        return(36, ground_desert_goat_horn, "Combat potion<br>Harralander & ground desert goat horn");
                    case 15 :
                        return(38, snape_grass, "Prayer restore potion<br>Ranarr weed & snape grass");
                    case 16 :
                        return(38, moonlight_grub, "Moonlight Potion<br>Vial of water & Moonlight grub paste");
                    case 17 :
                        return(39, salamander_tar_red, "Tarromin tar<br>Tarromin & swamp tar");
                    case 18 :
                        return(44, salamander_tar_black, "Harralander tar<br>Harralander & swamp tar");
                    case 19 :
                        return(45, eye_of_newt, "Super attack potion<br>Irit leaf & eye of newt");
                    case 20 :
                        return(48, unicorn_horn_dust, "Super anti-poison potion<br>Irit leaf & ground unicorn horn");
                    case 21 :
                        return(50, snape_grass, "Fishing potion<br>Avantoe & snape grass");
                    case 22 :
                        return(52, mortmyremushroom, "Super energy potion<br>Avantoe & Mort Myre fungi");
                    case 23 :
                        return(53, huntingbeast_sabreteeth, "Hunting potion - Avantoe & ground sabre-toothed kebbit teeth");
                    case 24 :
                        return(54, aldarium, "Goading potion<br>Harralander & aldarium");
                    case 25 :
                        return(55, limpwurt_root, "Super strength potion<br>Kwuarm & limpwurt root");
                    case 26 :
                        return(55, salamander_tar_mountain, "Irit tar<br>Irit leaf & swamp tar");
                    case 27 :
                        return(57, fairytale2_gorak_claws, "Magic essence potion<br>Star flower & ground gorak's claw");
                    case 28 :
                        return(58, aldarium, "Prayer regeneration potion<br>Huasca & aldarium");
                    case 29 :
                        return(60, dragon_scale_dust, "Weapon poison<br>Kwuarm & ground blue dragon scale");
                    case 30 :
                        return(63, red_spiders_eggs, "Super restore potion<br>Snapdragon & red spiders' eggs");
                    case 31 :
                        return(65, nail_beast_nail, "Sanfew serum cure all<br>Super restore potion, snake weed, ground unicorn horn and nail beast nails.");
                    case 32 :
                        return(66, white_berries, "Super defence potion<br>Cadantine & white berries");
                    case 33 :
                        return(68, yew_roots, "Antidote+<br>Coconut milk, toadflax & yew roots");
                    case 34 :
                        return(69, dragon_scale_dust, "Anti-firebreath potion<br>Lantadyme & ground blue dragon scale");
                    case 35 :
                        return(70, prif_crystal_shard_crushed, "Divine super attack potion<br>Crystal dust & super attack potion");
                    case 36 :
                        return(70, prif_crystal_shard_crushed, "Divine super strength potion<br>Crystal dust & super strength potion");
                    case 37 :
                        return(70, prif_crystal_shard_crushed, "Divine super defence potion<br>Crystal dust & super defence potion");
                    case 38 :
                        return(72, wine_of_zamorak, "Ranging potion<br>Dwarf weed & wine of Zamorak");
                    case 39 :
                        return(73, cactus_spine, "Weapon poison(+)<br>Coconut milk, cactus spine & red spiders' eggs");
                    case 40 :
                        return(74, prif_crystal_shard_crushed, "Divine ranging potion<br>Crystal dust & ranging potion");
                    case 41 :
                        return(76, cactus_potato, "Magic potion<br>Lantadyme & potato cactus");
                    case 42 :
                        return(77, cert_reinitialisation_05_inactive, "Stamina potion<br>Amylase & super energy potion");
                    case 43 :
                        return(78, jangerberries, "Zamorak brew<br>Torstol & jangerberries");
                    case 44 :
                        return(78, prif_crystal_shard_crushed, "Divine magic potion<br>Crystal dust & magic potion");
                    case 45 :
                        return(79, magic_roots, "Antidote++<br>Coconut milk, irit leaf & magic tree roots");
                    case 46 :
                        return(80, wine_of_zamorak, "Bastion potion<br>Cadantine & wine of Zamorak mixed in a vial of blood");
                    case 47 :
                        return(80, cactus_potato, "Battlemage potion<br>Cadantine & potato cactus mixed in a vial of blood");
                    case 48 :
                        return(81, crushed_bird_nest, "Saradomin brew<br>Toadflax & crushed birdnest");
                    case 49 :
                        return(82, poisonivy_berries, "Weapon poison(++)<br>Coconut milk, nightshade & poison ivy berries");
                    case 50 :
                        return(84, cert_pickpocket_guide_paladin, "Extended antifire potion<br>Antifire potion & lava scale shards");
                    case 51 :
                        return(85, nihil_dust, "Ancient brew<br>Dwarf weed & nihil dust");
                    case 52 :
                        return(86, prif_crystal_shard_crushed, "Divine bastion potion<br>Crystal dust & bastion potion");
                    case 53 :
                        return(86, prif_crystal_shard_crushed, "Divine battlemage potion<br>Crystal dust & battlemage potion");
                    case 54 :
                        return(87, cert_reinitialisation_23_inactive, "Anti-venom<br>Antidote++ & Zulrah's scales");
                    case 55 :
                        return(88, lily_of_the_sands, "Menaphite remedy<br>Dwarf weed & Lily of the sands");
                    case 56 :
                        return(90, torstol, "Super combat potion<br>Super attack potion, super defence potion, super strength potion & torstol");
                    case 57 :
                        return(91, ancient_essence, "Forgotten brew<br>Ancient brew & ancient essence");
                    case 58 :
                        return(92, crushed_dragon_bones, "Super antifire potion<br>Antifire potion & crushed superior dragon bones<br>(after Dragon Slayer II)");
                    case 59 :
                        return(94, torstol, "Anti-venom+<br>Anti-venom & Torstol");
                    case 60 :
                        return(94, araxyte_venom_sack, "Extended anti-venom+<br>Anti-venom+ & <oc_name(araxyte_venom_sack)>");
                    case 61 :
                        return(97, prif_crystal_shard_crushed, "Divine super combat potion<br>Crystal dust & super combat potion");
                    case 62 :
                        return(98, cert_pickpocket_guide_paladin, "Extended super antifires<br>Super antifire potion & lava scale shards<br>(after Dragon Slayer II)");
                }
                return(-1, null, "");
            case 2 :
                switch_int ($int2) {
                    case 0 :
                        return(3, guam_leaf, "Guam leaf");
                    case 1 :
                        return(3, rogues_purse, "Rogue's purse");
                    case 2 :
                        return(3, snake_weed, "Snake weed");
                    case 3 :
                        return(5, marentill, "Marrentill");
                    case 4 :
                        return(11, tarromin, "Tarromin");
                    case 5 :
                        return(20, harralander, "Harralander");
                    case 6 :
                        return(25, ranarr_weed, "Ranarr weed");
                    case 7 :
                        return(30, toadflax, "Toadflax");
                    case 8 :
                        return(40, irit_leaf, "Irit leaf");
                    case 9 :
                        return(48, avantoe, "Avantoe");
                    case 10 :
                        return(54, kwuarm, "Kwuarm");
                    case 11 :
                        return(58, huasca, "Huasca");
                    case 12 :
                        return(59, snapdragon, "Snapdragon");
                    case 13 :
                        return(65, cadantine, "Cadantine");
                    case 14 :
                        return(67, lantadyme, "Lantadyme");
                    case 15 :
                        return(70, dwarf_weed, "Dwarf weed");
                    case 16 :
                        return(75, torstol, "Torstol");
                }
                return(-1, null, "");
            case 3 :
                switch_int ($int2) {
                    case 0 :
                        return(-1, invis_rod, "You must complete barbarian herblore training before you can make these potions.");
                    case 1 :
                        return(4, brutal_2dose1attack, "Attack mix");
                    case 2 :
                        return(6, brutal_2doseantipoison, "Antipoison mix");
                    case 3 :
                        return(9, brutal_relicyms_balm2, "Relicym's mix");
                    case 4 :
                        return(14, brutal_2dose1strength, "Strength mix");
                    case 5 :
                        return(24, brutal_2dosestatrestore, "Restore mix");
                    case 6 :
                        return(29, brutal_2dose1energy, "Energy mix");
                    case 7 :
                        return(33, brutal_2dose1defense, "Defence mix");
                    case 8 :
                        return(37, brutal_2dose1agility, "Agility mix");
                    case 9 :
                        return(40, brutal_2dosecombat, "Combat mix");
                    case 10 :
                        return(42, brutal_2doseprayerrestore, "Prayer mix");
                    case 11 :
                        return(47, brutal_2dose2attack, "Super attack mix");
                    case 12 :
                        return(51, brutal_2dose2antipoison, "Anti-poison supermix");
                    case 13 :
                        return(53, brutal_2dosefisherspotion, "Fishing mix");
                    case 14 :
                        return(56, brutal_2dose2energy, "Super energy mix");
                    case 15 :
                        return(58, brutal_2dose1hunting, "Hunting mix");
                    case 16 :
                        return(59, brutal_2dose2strength, "Super strength mix");
                    case 17 :
                        return(61, brutal_2dosemagicess, "Magic essence mix");
                    case 18 :
                        return(67, brutal_2dose2restore, "Super restore mix");
                    case 19 :
                        return(71, brutal_2dose2defense, "Super defence mix");
                    case 20 :
                        return(74, "brutal_antidote+2", "Antidote+ mix");
                    case 21 :
                        return(75, brutal_2dose1antidragon, "Antifire mix");
                    case 22 :
                        return(80, brutal_2doserangerspotion, "Ranging mix");
                    case 23 :
                        return(83, brutal_2dose1magic, "Magic mix");
                    case 24 :
                        return(85, brutal_2dosepotionofzamorak, "Zamorak mix");
                    case 25 :
                        return(86, brutal_2dosestamina, "Stamina mix");
                    case 26 :
                        return(91, brutal_2dose2antidragon, "Extended antifire mix");
                    case 27 :
                        return(92, brutal_2doseancientbrew, "Ancient mix");
                    case 28 :
                        return(98, brutal_2dose3antidragon, "Super antifire mix");
                    case 29 :
                        return(99, brutal_2dose4antidragon, "Extended super antifire mix");
                }
                return(-1, null, "");
            case 4 :
                switch_int ($int2) {
                    case 0 :
                        return(-1, invis_rod, "Potions may be <$string0>strong</col>, <$string0>standard</col> or <$string0>weak</col>, depending on your Herblore level.");
                    case 1 :
                        return(47, raids_golpar, "Weak Golpar potions:");
                    case 2 :
                        return(scale(126, 100, 47), raids_golpar, "Standard Golpar potions");
                    case 3 :
                        return(scale(150, 100, 47), raids_golpar, "Strong Golpar potions");
                    case 4 :
                        return(-1, raids_vial_elder_4, "Elder potions<br> with Stinkhorn mushroom");
                    case 5 :
                        return(-1, raids_vial_kodai_4, "Kodai potions<br> with Endarkened juice");
                    case 6 :
                        return(-1, raids_vial_twisted_4, "Twisted potions<br> with Cicely");
                    case 7 :
                        return(52, raids_buchuleaf, "Weak Buchu leaf potions:");
                    case 8 :
                        return(scale(126, 100, 52), raids_buchuleaf, "Standard Buchu leaf potions");
                    case 9 :
                        return(scale(150, 100, 52), raids_buchuleaf, "Strong Buchu leaf potions");
                    case 10 :
                        return(-1, raids_vial_revitalisation_4, "Revitalisation potions<br> with Stinkhorn mushroom");
                    case 11 :
                        return(-1, raids_vial_xericaid_4, "Xeric's Aid potions<br> with Endarkened juice");
                    case 12 :
                        return(-1, raids_vial_prayer_4, "Prayer enhance potions<br> with Cicely");
                    case 13 :
                        return(60, raids_noxifer, "Weak Noxifer potions:");
                    case 14 :
                        return(scale(126, 100, 60), raids_noxifer, "Standard Noxifer potions");
                    case 15 :
                        return(scale(150, 100, 60), raids_noxifer, "Strong Noxifer potions");
                    case 16 :
                        return(-1, raids_vial_antipoison_4, "Antipoison potions<br> with Cicely");
                    case 17 :
                        return(-1, raids_vial_overload_4, "Overload<br> with Elder, Kodai & Twisted potions");
                    case 18 :
                        return(-1, raids_vial_overload_strong_4, "For overload potions, the tier is capped at the tier of the potions used to make it.");
                }
                return(-1, null, "");
            case 5 :
                switch_int ($int2) {
                    case 0 :
                        return(31, huntguide_herbiboar, "Harvest herbs from the <$string0>Herbiboar</col> on <$string0>Fossil Island</col> (with 80 Hunter).");
                    case 1 :
                        return(58, slayer_herb_sack, "Use the Herb Sack reward item, purchased from the Tithe Farm or Slayer Masters.");
                    case 2 :
                        return(60, mm_potion_mmm_unfinished, "<oc_name(mm_potion_mmm_unfinished)> (Mastering Mixology).");
                    case 3 :
                        return(60, mm_potion_aaa_unfinished, "<oc_name(mm_potion_aaa_unfinished)> (Mastering Mixology).");
                    case 4 :
                        return(60, mm_potion_lll_unfinished, "<oc_name(mm_potion_lll_unfinished)> (Mastering Mixology).");
                    case 5 :
                        return(63, mm_potion_mma_unfinished, "<oc_name(mm_potion_mma_unfinished)> (Mastering Mixology).");
                    case 6 :
                        return(66, mm_potion_mml_unfinished, "<oc_name(mm_potion_mml_unfinished)> (Mastering Mixology).");
                    case 7 :
                        return(69, mm_potion_aam_unfinished, "<oc_name(mm_potion_aam_unfinished)> (Mastering Mixology).");
                    case 8 :
                        return(72, mm_potion_aal_unfinished, "<oc_name(mm_potion_aal_unfinished)> (Mastering Mixology).");
                    case 9 :
                        return(75, mm_potion_llm_unfinished, "<oc_name(mm_potion_llm_unfinished)> (Mastering Mixology).");
                    case 10 :
                        return(78, mm_potion_lla_unfinished, "<oc_name(mm_potion_lla_unfinished)> (Mastering Mixology).");
                    case 11 :
                        return(81, mm_potion_mal_unfinished, "<oc_name(mm_potion_mal_unfinished)> (Mastering Mixology).");
                    case 12 :
                        return(81, mm_secondary_pouch, "Use the Secondary Pouch reward item, purchased from the Mastering Mixology activity.");
                }
                return(-1, null, "");
        }
        return(-1, null, "");
    case 10 :
        return(~skill_guide_data_thieving($int1, $int2));
    case 11 :
        switch_int ($int1) {
            case 0 :
                switch_int ($int2) {
                    case 0 :
                        return(-1, hammer, "Crafting is a wide-ranging skill that allows you to create various pieces of armour, jewellery, equipment and more.");
                    case 1 :
                        return(-1, leather, "To craft armour out of animal hides, you'll typically first need to take the hides to a tanner to get them tanned, then combine them with a needle and thread, which can be acquired from certain crafting shops in the world.");
                    case 2 :
                        return(-1, softclay, "To make pottery, you'll need to obtain some soft clay, obtained by adding water to clay. You can then use a pottery wheel to shape the clay into an unfired item, which you can then finish in a pottery oven.");
                    case 3 :
                        return(-1, gold_bar, "To make jewellery, you'll need to first get a crafting mould. You can then take that mould and some gold or silver bars to a furnace to craft your jewellery. At higher crafting levels, you can cut gems and mould them simultaneously to create jewellery which you can enchant!");
                }
            case 1 :
                if ($int2 = 0) {
                    return(21, sack_empty, "Vegetable sack");
                } else if ($int2 = 1) {
                    return(26, fossil_drift_net, "Drift net");
                } else if ($int2 = 2) {
                    return(36, basket_empty, "Fruit basket");
                }
                return(-1, null, "");
            case 2 :
                switch_int ($int2) {
                    case 0 :
                        return(1, leather_gloves, "Leather gloves");
                    case 1 :
                        return(2, forestry_pheasant_hat, "Members: Pheasant clothing");
                    case 2 :
                        return(7, leather_boots, "Leather boots");
                    case 3 :
                        return(9, leather_cowl, "Leather cowl");
                    case 4 :
                        return(11, leather_vambraces, "Leather vambraces");
                    case 5 :
                        return(14, leather_armour, "Leather body");
                    case 6 :
                        return(14, xeric_hat, "Members: Xerician hat");
                    case 7 :
                        return(15, snelm_round_swamp, "Members: Snail helmet");
                    case 8 :
                        return(15, hundred_pirate_crab_shell_helm, "Members: Crab shell armour");
                    case 9 :
                        return(17, xeric_robe, "Members: Xerician robe");
                    case 10 :
                        return(18, leather_chaps, "Leather chaps");
                    case 11 :
                        return(22, xeric_top, "Members: Xerician top");
                    case 12 :
                        return(28, hardleather_body, "Hard leather body");
                    case 13 :
                        return(32, spiked_vambraces, "Members: Spiked vambraces");
                    case 14 :
                        return(35, broodoo_combatshield_10, "Members: Broodoo shield");
                    case 15 :
                        return(38, coif, "Members: Coif");
                    case 16 :
                        return(41, studded_body, "Members: Studded body");
                    case 17 :
                        return(41, leather_shield, "Members: Hard leather shield");
                    case 18 :
                        return(43, yak_hide_armour_greaves, "Members: Yak-hide leg armour");
                    case 19 :
                        return(44, studded_chaps, "Members: Studded chaps");
                    case 20 :
                        return(45, snakeskin_boots, "Members: Snakeskin boots");
                    case 21 :
                        return(46, yak_hide_armour_body, "Members: Yak-hide body armour");
                    case 22 :
                        return(47, snakeskin_vambraces, "Members: Snakeskin vambraces");
                    case 23 :
                        return(48, snakeskin_bandana, "Members: Snakeskin bandana");
                    case 24 :
                        return(51, snakeskin_chaps, "Members: Snakeskin chaps");
                    case 25 :
                        return(52, serpentine_helm_charged, "Members: Serpentine helm");
                    case 26 :
                        return(53, snakeskin_body, "Members: Snakeskin body");
                    case 27 :
                        return(55, slayer_helm, "Members: Slayer helm");
                    case 28 :
                        return(56, snakeskin_shield, "Members: Snakeskin shield");
                    case 29 :
                        return(57, dragon_vambraces, "Members: Green dragonhide vambraces");
                    case 30 :
                        return(60, dragonhide_chaps, "Members: Green dragonhide chaps");
                    case 31 :
                        return(60, splitbark_gauntlets, "Members: Splitbark gauntlets");
                    case 32 :
                        return(60, splitbark_greaves, "Members: Splitbark boots");
                    case 33 :
                        return(61, splitbark_helm, "Members: Splitbark helm");
                    case 34 :
                        return(62, green_dhide_shield, "Members: Green dragonhide shield");
                    case 35 :
                        return(62, splitbark_body, "Members: Splitbark body");
                    case 36 :
                        return(62, splitbark_legs, "Members: Splitbark legs");
                    case 37 :
                        return(63, dragonhide_body, "Members: Green dragonhide body");
                    case 38 :
                        return(66, blue_dragon_vambraces, "Members: Blue dragonhide vambraces");
                    case 39 :
                        return(68, blue_dragonhide_chaps, "Members: Blue dragonhide chaps");
                    case 40 :
                        return(68, hide_cape, "Members: Mixed hide cape");
                    case 41 :
                        return(69, hide_boots, "Members: Mixed hide boots");
                    case 42 :
                        return(69, blue_dhide_shield, "Members: Blue dragonhide shield");
                    case 43 :
                        return(71, blue_dragonhide_body, "Members: Blue dragonhide body");
                    case 44 :
                        return(71, hide_legs, "Members: Mixed hide legs");
                    case 45 :
                        return(72, hide_top, "Members: Mixed hide body");
                    case 46 :
                        return(73, red_dragon_vambraces, "Members: Red dragonhide vambraces");
                    case 47 :
                        return(75, red_dragonhide_chaps, "Members: Red dragonhide chaps");
                    case 48 :
                        return(76, red_dhide_shield, "Members: Red dragonhide shield");
                    case 49 :
                        return(77, red_dragonhide_body, "Members: Red dragonhide body");
                    case 50 :
                        return(79, black_dragon_vambraces, "Members: Black dragonhide vambraces");
                    case 51 :
                        return(82, black_dragonhide_chaps, "Members: Black dragonhide chaps");
                    case 52 :
                        return(83, black_dhide_shield, "Members: Black dragonhide shield");
                    case 53 :
                        return(84, black_dragonhide_body, "Members: Black dragonhide body");
                    case 54 :
                        return(86, huey_vambraces, "Members: <oc_name(huey_vambraces)>");
                    case 55 :
                        return(86, huey_coif, "Members: <oc_name(huey_coif)>");
                    case 56 :
                        return(87, huey_chaps, "Members: <oc_name(huey_chaps)>");
                    case 57 :
                        return(88, huey_body, "Members: <oc_name(huey_body)>");
                    case 58 :
                        return(90, masori_body_fortified, "Members: Break down armadylean armour and fortify Masori armour");
                }
                return(-1, null, "");
            case 3 :
                switch_int ($int2) {
                    case 0 :
                        return(1, ball_of_wool, "Wool");
                    case 1 :
                        return(10, bow_string, "Members: Flax into bow strings");
                    case 2 :
                        return(10, xbows_crossbow_string, "Members: Sinew into crossbow strings");
                    case 3 :
                        return(19, magic_string, "Members: Magic tree roots into magic strings");
                    case 4 :
                        return(30, rope, "Members: Yak hair into rope");
                }
                return(-1, null, "");
            case 4 :
                switch_int ($int2) {
                    case 0 :
                        return(1, pot_empty, "Pot");
                    case 1 :
                        return(3, cup_empty, "Members: Cup");
                    case 2 :
                        return(7, piedish, "Pie dish");
                    case 3 :
                        return(8, bowl_empty, "Bowl");
                    case 4 :
                        return(19, plantpot_empty, "Members: Plant pot");
                    case 5 :
                        return(25, potlid, "Members: Pot lid");
                }
                return(-1, null, "");
            case 5 :
                switch_int ($int2) {
                    case 0 :
                        return(1, beer_glass, "Beer glass");
                    case 1 :
                        return(4, candle_lantern_empty, "Candle lantern");
                    case 2 :
                        return(12, oil_lamp_empty, "Oil lamp");
                    case 3 :
                        return(26, oil_lantern_empty, "Oil lantern");
                    case 4 :
                        return(33, vial_empty, "Vial");
                    case 5 :
                        return(42, fishbowl_empty, "Fishbowl");
                    case 6 :
                        return(46, stafforb, "Glass orb");
                    case 7 :
                        return(49, bullseye_lantern_lens, "Bullseye lantern lens");
                    case 8 :
                        return(87, dorgesh_light_bulb, "Dorgeshuun light orb");
                }
                return(-1, null, "");
            case 6 :
                if ($int2 = 0) {
                    return(1, opal, "Members: Cut opal");
                }
                if ($int2 = 1) {
                    return(1, opal_ring, "Members: Opal ring");
                }
                if ($int2 = 2) {
                    return(3, anma_p_buttons, "Polished buttons");
                }
                if ($int2 = 3) {
                    return(5, gold_ring, "Gold ring");
                }
                if ($int2 = 4) {
                    return(6, gold_necklace, "Gold necklace");
                }
                if ($int2 = 5) {
                    return(7, jewl_gold_bracelet, "Members: Gold bracelet");
                }
                if ($int2 = 6) {
                    return(8, strung_gold_amulet, "Gold amulet");
                }
                if ($int2 = 7) {
                    return(13, jade, "Members: Cut jade");
                }
                if ($int2 = 8) {
                    return(13, jade_ring, "Members: Jade ring");
                }
                if ($int2 = 9) {
                    return(16, stringstar, "Holy symbol");
                }
                if ($int2 = 10) {
                    return(16, red_topaz, "Members: Cut red topaz");
                }
                if ($int2 = 11) {
                    return(16, topaz_ring, "Members: Red topaz ring");
                }
                if ($int2 = 12) {
                    return(16, opal_necklace, "Members: Opal necklace");
                }
                if ($int2 = 13) {
                    return(17, stringsnake, "Members: Unholy symbol");
                }
                if ($int2 = 14) {
                    return(20, sapphire, "Cut sapphire");
                }
                if ($int2 = 15) {
                    return(20, sapphire_ring, "Sapphire ring");
                }
                if ($int2 = 16) {
                    return(22, sapphire_necklace, "Sapphire necklace");
                }
                if ($int2 = 17) {
                    return(22, opal_bracelet, "Members: Opal bracelet");
                }
                if ($int2 = 18) {
                    return(23, tiara, "Tiara");
                }
                if ($int2 = 19) {
                    return(23, jewl_sapphire_bracelet, "Members: Sapphire bracelet");
                }
                if ($int2 = 20) {
                    return(24, strung_sapphire_amulet, "Sapphire amulet");
                }
                if ($int2 = 21) {
                    return(25, jade_necklace, "Members: Jade necklace");
                }
                if ($int2 = 22) {
                    return(27, emerald, "Cut emerald");
                }
                if ($int2 = 23) {
                    return(27, emerald_ring, "Emerald ring");
                }
                if ($int2 = 24) {
                    return(27, strung_opal_amulet, "Members: Opal amulet");
                }
                if ($int2 = 25) {
                    return(29, emerald_necklace, "Emerald necklace");
                }
                if ($int2 = 26) {
                    return(29, jade_bracelet, "Members: Jade bracelet");
                }
                if ($int2 = 27) {
                    return(30, jewl_emerald_bracelet, "Members: Emerald bracelet");
                }
                if ($int2 = 28) {
                    return(31, strung_emerald_amulet, "Emerald amulet");
                }
                if ($int2 = 29) {
                    return(32, topaz_necklace, "Members: Red topaz necklace");
                }
                if ($int2 = 30) {
                    return(34, ruby, "Cut ruby");
                }
                if ($int2 = 31) {
                    return(34, ruby_ring, "Ruby ring");
                }
                if ($int2 = 32) {
                    return(34, strung_jade_amulet, "Members: Jade amulet");
                }
                if ($int2 = 33) {
                    return(37, hunting_strung_rabbit_foot, "Members: Rabbit-foot necklaces");
                }
                if ($int2 = 34) {
                    return(38, topaz_bracelet, "Members: Red topaz bracelet");
                }
                if ($int2 = 35) {
                    return(40, ruby_necklace, "Ruby necklace");
                }
                if ($int2 = 36) {
                    return(42, jewl_ruby_bracelet, "Members: Ruby bracelet");
                }
                if ($int2 = 37) {
                    return(42, tiara_gold, "Members: Gold Tiara");
                }
                if ($int2 = 38) {
                    return(43, diamond, "Cut diamond");
                }
                if ($int2 = 39) {
                    return(43, diamond_ring, "Diamond ring");
                }
                if ($int2 = 40) {
                    return(45, strung_topaz_amulet, "Members: Red topaz amulet");
                }
                if ($int2 = 41) {
                    return(50, strung_ruby_amulet, "Ruby amulet");
                }
                if ($int2 = 42) {
                    return(55, dragonstone, "Members: Cut dragonstone");
                }
                if ($int2 = 43) {
                    return(55, dragonstone_ring, "Members: Dragonstone ring");
                }
                if ($int2 = 44) {
                    return(56, diamond_necklace, "Diamond necklace");
                }
                if ($int2 = 45) {
                    return(58, jewl_diamond_bracelet, "Members: Diamond bracelet");
                }
                if ($int2 = 46) {
                    return(67, onyx, "Members: Cut onyx");
                }
                if ($int2 = 47) {
                    return(67, onyx_ring, "Members: Onyx ring");
                }
                if ($int2 = 48) {
                    return(70, strung_diamond_amulet, "Diamond amulet");
                }
                if ($int2 = 49) {
                    return(72, dragonstone_necklace, "Members: Dragonstone necklace");
                }
                if ($int2 = 50) {
                    return(74, jewl_dragonstone_bracelet, "Members: Dragonstone bracelet");
                }
                if ($int2 = 51) {
                    return(75, slayer_ring_8, "Members: Slayer ring");
                }
                if ($int2 = 52) {
                    return(80, strung_dragonstone_amulet, "Members: Dragonstone amulet");
                }
                if ($int2 = 53) {
                    return(80, berserker_icon, "Members: Icon Removal");
                }
                if ($int2 = 54) {
                    return(80, ultor_ring, "Members: Ultor, Venator, Bellator, Magus rings");
                }
                if ($int2 = 55) {
                    return(82, onyx_necklace, "Members: Onyx necklace");
                }
                if ($int2 = 56) {
                    return(84, jewl_onyx_bracelet, "Members: Onyx bracelet");
                }
                if ($int2 = 57) {
                    return(86, amulet_of_rancour, "Members: Amulet of Rancour");
                }
                if ($int2 = 58) {
                    return(89, zenyte, "Members: Cut zenyte");
                }
                if ($int2 = 59) {
                    return(89, zenyte_ring, "Members: Zenyte ring");
                }
                if ($int2 = 60) {
                    return(90, strung_onyx_amulet, "Members: Onyx amulet");
                }
                if ($int2 = 61) {
                    return(92, zenyte_necklace, "Members: Zenyte necklace");
                }
                if ($int2 = 62) {
                    return(95, zenyte_bracelet, "Members: Zenyte bracelet");
                }
                if ($int2 = 63) {
                    return(98, zenyte_amulet, "Members: Zenyte amulet");
                }
                return(-1, null, "");
            case 7 :
                switch_int ($int2) {
                    case 0 :
                        return(18, silver_sickle, "Silver sickle");
                    case 1 :
                        return(21, xbows_crossbow_bolts_silver_unfeathered_5, "Silver crossbow bolts");
                    case 2 :
                        return(35, rat_bone_staff, "Bone staff");
                    case 3 :
                        return(54, water_battlestaff, "Water battlestaff");
                    case 4 :
                        return(58, earth_battlestaff, "Earth battlestaff");
                    case 5 :
                        return(59, toxic_sotd_charged, "Toxic Staff of the Dead");
                    case 6 :
                        return(59, toxic_tots_charged, "Trident of the Swamp");
                    case 7 :
                        return(62, fire_battlestaff, "Fire battlestaff");
                    case 8 :
                        return(66, air_battlestaff, "Air battlestaff");
                    case 9 :
                        return(72, noxious_halberd, "Noxious Halberd (With 72 Smithing)");
                    case 10 :
                        return(74, purging_staff, "Purging staff");
                    case 11 :
                        return(83, barrows_interface_karil_green, "Amethyst bolt tips");
                    case 12 :
                        return(85, amethyst_arrowheads, "Amethyst arrowtips");
                    case 13 :
                        return(85, wild_cave_accursed_charged, "Accursed Sceptre");
                    case 14 :
                        return(87, wwf_farming_helper, "Amethyst javelin heads");
                    case 15 :
                        return(89, amethyst_dart_tip, "Amethyst dart tips");
                }
                return(-1, null, "");
            case 8 :
                switch_int ($int2) {
                    case 0 :
                        return(70, celestial_signet_charged, "Celestial signet<br>(with 70 Smithing)");
                    case 1 :
                        return(70, crystal_helmet, "Crystal helm<br>(with 70 Smithing)");
                    case 2 :
                        return(72, crystal_platelegs, "Crystal legs<br>(with 72 Smithing)");
                    case 3 :
                        return(74, crystal_chestplate, "Crystal body<br>(with 74 Smithing)");
                    case 4 :
                        return(76, crystal_pickaxe, "Crystal pickaxe<br>(with 76 Smithing)");
                    case 5 :
                        return(76, crystal_axe, "Crystal axe<br>(with 76 Smithing)");
                    case 6 :
                        return(76, crystal_axe_2h, "Crystal felling axe<br>(with 76 Smithing)");
                    case 7 :
                        return(76, crystal_harpoon, "Crystal harpoon<br>(with 76 Smithing)");
                    case 8 :
                        return(78, crystal_bow, "Crystal bow<br>(with 78 Smithing)");
                    case 9 :
                        return(78, crystal_halberd, "Crystal halberd<br>(with 78 Smithing)");
                    case 10 :
                        return(78, crystal_shield, "Crystal shield<br>(with 78 Smithing)");
                    case 11 :
                        return(80, prif_crystal_key, "Enhanced crystal key<br>(with 80 Smithing)");
                    case 12 :
                        return(80, prif_teleport_crystal, "Eternal teleport crystal<br>(with 80 Smithing)");
                    case 13 :
                        return(82, blade_of_saeldor, "Blade of Saeldor<br>(with 82 Smithing)");
                    case 14 :
                        return(82, blade_of_saeldor_infinite, "Blade of Saeldor (c)<br>(with 82 Smithing)");
                    case 15 :
                        return(82, bow_of_faerdhinen, "Bow of Faerdhinen<br>(with 82 Smithing)");
                    case 16 :
                        return(82, bow_of_faerdhinen_infinite, "Bow of Faerdhinen (c)<br>(with 82 Smithing)");
                }
                return(-1, null, "");
            case 9 :
                switch_int ($int2) {
                    case 0 :
                        return(5, birdhouse_normal, "Craft a birdhouse trap from normal logs");
                    case 1 :
                        return(10, damaged_ballista_rope, "Extract sinew from monkey tails");
                    case 2 :
                        return(15, birdhouse_oak, "Craft a birdhouse trap from oak logs");
                    case 3 :
                        return(25, birdhouse_willow, "Craft a birdhouse trap from willow logs");
                    case 4 :
                        return(30, hammer, "Repair Piscarilius fishing cranes<br>(with 30 Construction)");
                    case 5 :
                        return(35, birdhouse_teak, "Craft a birdhouse trap from teak logs");
                    case 6 :
                        return(35, hg_furpouch_small, "Craft small hunters' pouches");
                    case 7 :
                        return(38, arceuus_essence_block, "Dense essence<br>(with 38 Mining)");
                    case 8 :
                        return(45, birdhouse_maple, "Craft a birdhouse trap from maple logs");
                    case 9 :
                        return(50, birdhouse_mahogany, "Craft a birdhouse trap from mahogany logs");
                    case 10 :
                        return(50, forestry_clothes_pouch, "Craft a clothes pouch<br>(with 50 Woodcutting)");
                    case 11 :
                        return(50, hg_furpouch_med, "Craft medium hunters' pouches");
                    case 12 :
                        return(52, dorgesh_light_bulb, "Replace Dorgeshuun light orbs");
                    case 13 :
                        return(56, rcu_pouch_colossal, "Craft a colossal pouch from essence pouches");
                    case 14 :
                        return(60, birdhouse_yew, "Craft a birdhouse trap from yew logs");
                    case 15 :
                        return(65, hg_furpouch_large, "Craft large hunters' pouches");
                    case 16 :
                        return(75, birdhouse_magic, "Craft a birdhouse trap from magic logs");
                    case 17 :
                        return(75, divine_rune_pouch, "Craft a divine rune pouch from a Thread of Elidinis.");
                    case 18 :
                        return(90, birdhouse_redwood, "Craft a birdhouse trap from redwood logs");
                }
                return(-1, null, "");
        }
        return(-1, null, "");
    case 19 :
        if ($int1 = 0) {
            switch_int ($int2) {
                case 0 :
                    return(-1, feather, "Fletching allows you to create various ranged weapons, as well as ammunition to go with them.");
                case 1 :
                    return(-1, bow_string, "Making bows requires bowstring, which can be made from flax at a spinning wheel. You can use a knife on some logs to carve an unfinished bow, then add the bowstring to complete the weapon.");
                case 2 :
                    return(-1, headless_arrow_5, "To create arrows, you'll first need to carve logs into arrow shafts with a knife, then tip the arrow shafts with feathers. Finally, you'll need to add some arrow heads.");
                case 3 :
                    return(-1, xbows_crossbow_bolts_mithril_unfeathered_3, "To make bolts, you only need to combine unfinished bolts with feathers. You can also chisel gemstones down into bolt tips, with each gemstone being able to top a different bolt.");
            }
        }
        if ($int1 = 1) {
            switch_int ($int2) {
                case 0 :
                    return(1, arrow_shaft_5, "15 Arrow shafts (Logs)");
                case 1 :
                    return(1, bronze_arrow, "Bronze arrows");
                case 2 :
                    return(7, zogre_brutal_bronze, "Bronze 'brutal' arrows");
                case 3 :
                    return(15, arrow_shaft_5, "30 Arrow shafts (Oak logs)");
                case 4 :
                    return(15, iron_arrow, "Iron arrows");
                case 5 :
                    return(18, zogre_brutal_iron, "Iron 'brutal' arrows");
                case 6 :
                    return(30, arrow_shaft_5, "45 Arrow shafts (Willow logs)");
                case 7 :
                    return(30, steel_arrow, "Steel arrows");
                case 8 :
                    return(33, zogre_brutal_steel, "Steel 'brutal' arrows");
                case 9 :
                    return(38, zogre_brutal_black, "Black 'brutal' arrows");
                case 10 :
                    return(45, arrow_shaft_5, "60 Arrow shafts (Maple logs)");
                case 11 :
                    return(45, mithril_arrow, "Mithril arrows");
                case 12 :
                    return(49, zogre_brutal_mithril, "Mithril 'brutal' arrows");
                case 13 :
                    return(52, slayer_broad_arrows, "Broad arrows");
                case 14 :
                    return(60, arrow_shaft_5, "75 Arrow shafts (Yew logs)");
                case 15 :
                    return(60, adamant_arrow, "Adamant arrows");
                case 16 :
                    return(62, zogre_brutal_adamant, "Adamant 'brutal' arrows");
                case 17 :
                    return(75, arrow_shaft_5, "90 Arrow shafts (Magic logs)");
                case 18 :
                    return(75, rune_arrow, "Rune arrows");
                case 19 :
                    return(77, zogre_brutal_rune, "Rune 'brutal' arrows");
                case 20 :
                    return(82, amethyst_arrow, "Amethyst arrows");
                case 21 :
                    return(90, arrow_shaft_5, "105 Arrow shafts (Redwood logs)");
                case 22 :
                    return(90, dragon_arrow, "Dragon arrows");
            }
            return(-1, null, "");
        }
        if ($int1 = 2) {
            switch_int ($int2) {
                case 0 :
                    return(5, shortbow, "Shortbows");
                case 1 :
                    return(10, longbow, "Longbows");
                case 2 :
                    return(20, oak_shortbow, "Oak shortbows");
                case 3 :
                    return(25, oak_longbow, "Oak longbows");
                case 4 :
                    return(30, zogre_bow, "Ogre composite bows");
                case 5 :
                    return(35, rat_bone_bow, "Bone shortbow");
                case 6 :
                    return(35, willow_shortbow, "Willow shortbows");
                case 7 :
                    return(40, willow_longbow, "Willow longbows");
                case 8 :
                    return(50, maple_shortbow, "Maple shortbows");
                case 9 :
                    return(55, maple_longbow, "Maple longbows");
                case 10 :
                    return(65, yew_shortbow, "Yew shortbows");
                case 11 :
                    return(70, yew_longbow, "Yew longbows");
                case 12 :
                    return(74, scorching_bow, "Scorching bows");
                case 13 :
                    return(80, magic_shortbow, "Magic shortbows");
                case 14 :
                    return(85, magic_longbow, "Magic longbows");
                case 15 :
                    return(85, wild_cave_webweaver_charged, "Webweaver bow");
            }
            return(-1, null, "");
        }
        if ($int1 = 3) {
            switch_int ($int2) {
                case 0 :
                    return(9, bolt, "Bronze bolts");
                case 1 :
                    return(11, opal_bolt, "Opal-tipped bronze bolts");
                case 2 :
                    return(24, xbows_crossbow_bolts_blurite, "Blurite bolts<br>(after Knight's Sword quest)");
                case 3 :
                    return(26, xbows_crossbow_bolts_blurite_tipped_jade, "Jade-tipped blurite bolts");
                case 4 :
                    return(32, huntingbow_bolts, "Kebbit-tipped hunting bolts");
                case 5 :
                    return(39, xbows_crossbow_bolts_iron, "Iron bolts");
                case 6 :
                    return(41, pearl_bolt, "Pearl-tipped iron bolts");
                case 7 :
                    return(42, huntingbow_bigbolts, "Long kebbit-tipped hunting bolts");
                case 8 :
                    return(43, xbows_crossbow_bolts_silver, "Silver bolts");
                case 9 :
                    return(46, xbows_crossbow_bolts_steel, "Steel bolts");
                case 10 :
                    return(48, xbows_crossbow_bolts_steel_tipped_redtopaz, "Red topaz-tipped steel bolts");
                case 11 :
                    return(51, barbed_bolt, "Barbed-tipped bolts");
                case 12 :
                    return(54, xbows_crossbow_bolts_mithril, "Mithril bolts");
                case 13 :
                    return(55, slayer_broad_bolt, "Broad bolts");
                case 14 :
                    return(56, xbows_crossbow_bolts_mithril_tipped_sapphire, "Sapphire-tipped mithril bolts");
                case 15 :
                    return(58, xbows_crossbow_bolts_mithril_tipped_emerald, "Emerald-tipped mithril bolts");
                case 16 :
                    return(59, xbows_grapple_tip_bolt_mithril, "Mithril grapple-tipped bolts");
                case 17 :
                    return(61, xbows_crossbow_bolts_adamantite, "Adamantite bolts");
                case 18 :
                    return(62, sunlight_antelope_bolt, "Sunlight bolts");
                case 19 :
                    return(63, xbows_crossbow_bolts_adamantite_tipped_ruby, "Ruby-tipped adamantite bolts");
                case 20 :
                    return(65, xbows_crossbow_bolts_adamantite_tipped_diamond, "Diamond-tipped adamantite bolts");
                case 21 :
                    return(69, xbows_crossbow_bolts_runite, "Runite bolts");
                case 22 :
                    return(71, xbows_crossbow_bolts_runite_tipped_dragonstone, "Dragonstone-tipped runite bolts");
                case 23 :
                    return(72, moonlight_antelope_bolt, "Moonlight bolts");
                case 24 :
                    return(73, xbows_crossbow_bolts_runite_tipped_onyx, "Onyx-tipped runite bolts");
                case 25 :
                    return(76, slayer_broad_bolt_amethyst, "Amethyst broad bolts");
                case 26 :
                    return(84, dragon_bolts, "Dragon bolts");
            }
            return(-1, null, "");
        }
        if ($int1 = 4) {
            switch_int ($int2) {
                case 0 :
                    return(10, bronze_dart, "Bronze darts");
                case 1 :
                    return(22, iron_dart, "Iron darts");
                case 2 :
                    return(37, steel_dart, "Steel darts");
                case 3 :
                    return(52, mithril_dart, "Mithril darts");
                case 4 :
                    return(67, adamant_dart, "Adamant darts");
                case 5 :
                    return(78, toxic_blowpipe_loaded, "Toxic blowpipe");
                case 6 :
                    return(81, rune_dart, "Rune darts");
                case 7 :
                    return(90, amethyst_dart, "Amethyst darts");
                case 8 :
                    return(95, dragon_dart, "Dragon darts");
            }
            return(-1, null, "");
        }
        if ($int1 = 5) {
            switch_int ($int2) {
                case 0 :
                    return(9, xbows_crossbow_stock_wood, "Bronze/wooden crossbows");
                case 1 :
                    return(24, xbows_crossbow_stock_oak, "Blurite/oak crossbows<br>(after Knight's Sword quest)");
                case 2 :
                    return(39, xbows_crossbow_stock_willow, "Iron/willow crossbows");
                case 3 :
                    return(46, xbows_crossbow_stock_teak, "Steel/teak crossbows");
                case 4 :
                    return(54, xbows_crossbow_stock_maple, "Mithril/maple crossbows");
                case 5 :
                    return(61, xbows_crossbow_stock_mahogany, "Adamantite/mahogany crossbows");
                case 6 :
                    return(69, xbows_crossbow_stock_yew, "Runite/yew crossbows");
                case 7 :
                    return(74, hunting_crossbow_sunlight, "Sunlight hunters' crossbow");
                case 8 :
                    return(78, xbows_crossbow_stock_magic, "Dragon/magic crossbows");
            }
            return(-1, null, "");
        }
        if ($int1 = 6) {
            switch_int ($int2) {
                case 0 :
                    return(3, bronze_javelin, "Bronze javelins");
                case 1 :
                    return(17, iron_javelin, "Iron javelins");
                case 2 :
                    return(32, steel_javelin, "Steel javelins");
                case 3 :
                    return(47, light_ballista, "Light ballistae");
                case 4 :
                    return(47, mithril_javelin, "Mithril javelins");
                case 5 :
                    return(62, adamant_javelin, "Adamant javelins");
                case 6 :
                    return(72, heavy_ballista, "Heavy ballistae");
                case 7 :
                    return(77, rune_javelin, "Rune javelins");
                case 8 :
                    return(84, amethyst_javelin, "Amethyst javelins");
                case 9 :
                    return(92, dragon_javelin, "Dragon javelins");
            }
            return(-1, null, "");
        }
        if ($int1 = 7) {
            switch_int ($int2) {
                case 0 :
                    return(27, oak_shield, "Oak shield");
                case 1 :
                    return(42, willow_shield, "Willow shield");
                case 2 :
                    return(57, maple_shield, "Maple shield");
                case 3 :
                    return(72, yew_shield, "Yew shield");
                case 4 :
                    return(87, magic_shield, "Magic shield");
                case 5 :
                    return(92, redwood_shield, "Redwood shield");
            }
            return(-1, null, "");
        }
        if ($int1 = 8) {
            switch_int ($int2) {
                case 0 :
                    return(40, battlestaff, "Battlestaves");
                case 1 :
                    return(60, hg_hunter_spear, "Hunter's spears");
            }
            return(-1, null, "");
        }
        return(-1, null, "");
    case 13 :
        if ($int1 = 0) {
            switch_int ($int2) {
                case 0 :
                    return(-1, iron_pickaxe, "Mining allows you to get various minerals from the world, for use in other skills; primarily Smithing.");
                case 1 :
                    return(-1, iron_ore, "To mine a rock, simply interact with it while holding a pickaxe you have the level to use and you'll start mining it. Eventually, you'll collect the ore and the rock will deplete. Low level rocks will replenish themselves fairly quickly, but higher level ones will take longer and longer to come back.");
                case 2 :
                    return(-1, rune_pickaxe, "At higher mining levels, you'll have an increased chance of successfully mining a rock. You'll also be able to use more powerful pickaxes, which decrease the amount of time between mining attempts.");
                case 3 :
                    return(-1, gold_ore, "Note that while most pickaxes have an Attack level requirement to equip them, you're still able to use them from within your inventory if you have the required Mining level.");
            }
        }
        if ($int1 = 1) {
            switch_int ($int2) {
                case 0 :
                    return(1, blankrune, "Rune essence<br>(after Rune Mysteries)");
                case 1 :
                    return(1, clay, "Clay");
                case 2 :
                    return(1, copper_ore, "Copper ore");
                case 3 :
                    return(1, tin_ore, "Tin ore");
                case 4 :
                    return(10, blurite_ore, "Blurite ore");
                case 5 :
                    return(10, limestone, "Members: Limestone");
                case 6 :
                    return(14, camdozaal_barronite_shard, "Barronite<br>(after Below Ice Mountain)");
                case 7 :
                    return(15, iron_ore, "Iron ore");
                case 8 :
                    return(20, silver_ore, "Silver ore");
                case 9 :
                    return(22, fossil_volcanic_ash, "Members: Volcanic ash");
                case 10 :
                    return(30, coal, "Coal");
                case 11 :
                    return(30, blankrune_high, "Members: Pure essence<br>(after Rune Mysteries)");
                case 12 :
                    return(30, paydirt, "Members: Motherlode mine (lower level)");
                case 13 :
                    return(35, enakh_sandstone_large, "Members: Sandstone");
                case 14 :
                    return(38, arceuus_essence_block, "Members: Dense essence<br>(with 38 Crafting)");
                case 15 :
                    return(40, gold_ore, "Gold");
                case 16 :
                    return(40, uncut_red_topaz, "Members: Gem rocks");
                case 17 :
                    return(41, calcified_deposit, "Members: Calcified rocks");
                case 18 :
                    return(42, lovakengj_sulphur, "Members: Volcanic sulphur");
                case 19 :
                    return(43, lovakengj_dynamite_fused, "Members: Lovakengj Blast Mine");
                case 20 :
                    return(45, enakh_granite_medium, "Members: Granite");
                case 21 :
                    return(50, fossil_mine_fragment_iron, "Members: Volcanic Mine");
                case 22 :
                    return(55, mithril_ore, "Mithril ore");
                case 23 :
                    return(57, paydirt, "Members: Motherlode mine (upper level)");
                case 24 :
                    return(60, blankrune_daeyalt, "Members: Daeyalt essence<br>(after Sins of the Father)");
                case 25 :
                    return(64, scar_tainted_essence, "Members: Tainted essence chunk");
                case 26 :
                    return(65, lovakite_ore, "Members: Lovakite ore");
                case 27 :
                    return(70, adamantite_ore, "Adamantite ore");
                case 28 :
                    return(70, softclay, "Members: Soft clay");
                case 29 :
                    return(72, red_salt, "Members: <"Te Salt">");
                case 30 :
                    return(72, blue_salt, "Members: <"Efh Salt">");
                case 31 :
                    return(72, green_salt, "Members: <"Urt Salt">");
                case 32 :
                    return(72, basalt, "Members: Basalt");
                case 33 :
                    return(75, ancient_essence_inv03, "Members: Ancient essence<br>(after Secrets of the North)");
                case 34 :
                    return(85, runite_ore, "Runite ore");
                case 35 :
                    return(92, amethyst, "Members: Amethyst");
            }
            return(-1, null, "");
        }
        if ($int1 = 2) {
            switch_int ($int2) {
                case 0 :
                    return(1, bronze_pickaxe, "Bronze pickaxe");
                case 1 :
                    return(1, iron_pickaxe, "Iron pickaxe");
                case 2 :
                    return(6, steel_pickaxe, "Steel pickaxe");
                case 3 :
                    return(11, black_pickaxe, "Black pickaxe");
                case 4 :
                    return(20, mguild_gloves, "Members: Mining gloves");
                case 5 :
                    return(21, mithril_pickaxe, "Mithril pickaxe");
                case 6 :
                    return(31, adamant_pickaxe, "Adamant pickaxe");
                case 7 :
                    return(41, rune_pickaxe, "Rune pickaxe");
                case 8 :
                    return(41, trail_gilded_pickaxe, "Gilded pickaxe");
                case 9 :
                    return(55, mguild_gloves_superior, "Members: Superior mining gloves");
                case 10 :
                    return(61, dragon_pickaxe, "Members: Dragon pickaxe");
                case 11 :
                    return(61, 3a_pickaxe, "Members: 3rd age pickaxe");
                case 12 :
                    return(61, infernal_pickaxe, "Members: Infernal pickaxe<br>(with 85 Smithing)");
                case 13 :
                    return(70, mguild_gloves_expert, "Members: Expert mining gloves");
                case 14 :
                    return(71, crystal_pickaxe, "Members: Crystal pickaxe<br>(after Song of the Elves)");
            }
            return(-1, null, "");
        }
        if ($int1 = 3) {
            switch_int ($int2) {
                case 0 :
                    return(30, paydirt, "Members: Motherlode Mine");
                case 1 :
                    return(57, paydirt, "Members: Motherlode Mine upper area");
                case 2 :
                    return(60, mithril_ore, "Mining Guild");
            }
            return(-1, null, "");
        }
        if ($int1 = 4) {
            switch_int ($int2) {
                case 0 :
                    return(10, star_dust_175, "Size-1 stars");
                case 1 :
                    return(20, star_dust_175, "Size-2 stars");
                case 2 :
                    return(30, star_dust_175, "Size-3 stars");
                case 3 :
                    return(40, star_dust_175, "Size-4 stars");
                case 4 :
                    return(50, star_dust_175, "Size-5 stars");
                case 5 :
                    return(60, star_dust_175, "Size-6 stars");
                case 6 :
                    return(70, star_dust_175, "Size-7 stars");
                case 7 :
                    return(80, star_dust_175, "Size-8 stars");
                case 8 :
                    return(90, star_dust_175, "Size-9 stars");
            }
        }
        return(-1, null, "");
    case 14 :
        return(~skill_guide_data_smithing($int1, $int2));
    case 15 :
        if ($int1 = 0) {
            switch_int ($int2) {
                case 0 :
                    return(-1, raw_cod, "Fishing allows you to gather fish at various points across Gielinor. Typically, these will be indicated by moving bubbles on the surface of the water.");
                case 1 :
                    return(-1, net, "Different fish require different equipment to catch; for instance, you need a fishing net to catch shrimp, but a fishing rod and bait to catch sardines.");
                case 2 :
                    return(-1, raw_lobster, "As your Fishing level increases, you'll gain access to more varieties of fish to catch, as well as having a higher chance of successfully catching fish when you try.");
            }
        }
        if ($int1 = 1) {
            switch_int ($int2) {
                case 0 :
                    return(1, raw_shrimp, "Shrimp - Small fishing net");
                case 1 :
                    return(5, tbwt_raw_karambwanji, "Members: Karambwanji - Small fishing net");
                case 2 :
                    return(7, raw_guppy, "Guppy - Small fishing net (After Below Ice Mountain)");
                case 3 :
                    return(15, raw_anchovies, "Anchovies - Small fishing net");
                case 4 :
                    return(20, raw_cavefish, "Cavefish - Small fishing net (After Below Ice Mountain)");
                case 5 :
                    return(33, giant_frogspawn, "Members: Giant frogspawn - Small fishing net");
                case 6 :
                    return(33, raw_tetra, "Tetra - Small fishing net (After Below Ice Mountain)");
                case 7 :
                    return(62, raw_monkfish, "Members: Monkfish - Small fishing net");
                case 8 :
                    return(82, cert_strung_sapphire_amulet_5, "Members: Minnow - Small fishing net<br>(after Fishing Contest)");
            }
            return(-1, null, "");
        }
        if ($int1 = 2) {
            switch_int ($int2) {
                case 0 :
                    return(16, raw_mackerel, "Members: Mackerel - Big fishing net");
                case 1 :
                    return(16, oystershell, "Members: Oyster - Big fishing net");
                case 2 :
                    return(16, casket, "Members: Caskets - Big fishing net");
                case 3 :
                    return(20, bream_fish_raw, "Members: Bream - Big fishing net");
                case 4 :
                    return(23, raw_cod, "Members: Cod - Big fishing net");
                case 5 :
                    return(46, raw_bass, "Members: Bass - Big fishing net");
                case 6 :
                    return(46, raw_catfish, "Members: Catfish - Big fishing net (After Below Ice Mountain)");
            }
            return(-1, null, "");
        }
        if ($int1 = 3) {
            switch_int ($int2) {
                case 0 :
                    return(5, raw_sardine, "Sardine - Fishing rod & Fishing bait");
                case 1 :
                    return(10, raw_herring, "Herring - Fishing rod & Fishing bait");
                case 2 :
                    return(20, raw_trout, "Trout - Fly fishing rod & Feathers");
                case 3 :
                    return(25, raw_pike, "Pike - Fishing rod & Fishing bait");
                case 4 :
                    return(28, mort_slimey_eel, "Members: Slimy eel - Fishing rod & Fishing bait");
                case 5 :
                    return(30, raw_salmon, "Salmon - Fly fishing rod & feathers");
                case 6 :
                    return(38, hunting_raw_fish_special, "Members: Rainbow fish - Fly fishing rod & Stripy feathers");
                case 7 :
                    return(38, raw_cave_eel, "Members: Cave eel - Fishing rod & Fishing bait");
                case 8 :
                    return(53, raw_lava_eel, "Members: Lava eel - Oily fishing rod & Fishing bait");
                case 9 :
                    return(80, infernal_eel, "Members: Infernal eel - Oily fishing rod & Fishing bait");
                case 10 :
                    return(82, raw_anglerfish, "Members: Anglerfish - Fishing rod & Sandworms");
                case 11 :
                    return(87, snakeboss_eel, "Members: Sacred eel - Fishing rod & Fishing bait");
            }
            return(-1, null, "");
        }
        if ($int1 = 4) {
            if ($int2 = 0) {
                return(35, raw_tuna, "Tuna - Harpoon");
            } else if ($int2 = 1) {
                return(50, raw_swordfish, "Swordfish - Harpoon");
            } else if ($int2 = 2) {
                return(76, raw_shark, "Members: Shark - Harpoon");
            }
            return(-1, null, "");
        }
        if ($int1 = 5) {
            switch_int ($int2) {
                case 0 :
                    return(43, aerial_fishing_bluegill, "Members: Bluegill - Aerial fishing<br>(With 35 hunter)");
                case 1 :
                    return(56, aerial_fishing_common_tench, "Members: Common tench - Aerial fishing<br>(With 51 hunter)");
                case 2 :
                    return(73, aerial_fishing_mottled_eel, "Members: Mottled eel - Aerial fishing<br>(With 68 hunter)");
                case 3 :
                    return(91, aerial_fishing_greater_siren, "Members: Greater siren - Aerial fishing<br>(With 87 hunter)");
            }
            return(-1, null, "");
        }
        if ($int1 = 6) {
            if ($int2 = 0) {
                return(40, raw_lobster, "Lobster - Lobster pot");
            } else if ($int2 = 1) {
                return(85, raw_dark_crab, "Members: Dark crab - Lobster pot & Dark fishing bait");
            }
            return(-1, null, "");
        }
        if ($int1 = 7) {
            switch_int ($int2) {
                case 0 :
                    return(-1, invis_rod, "To start fishing like a Barbarian, talk to<br>Otto Godblessed when you have at least<br>level 48 Fishing, level 15 Agility and level 15 Strength.");
                case 1 :
                    return(48, brut_spawning_trout, "Leaping trout - Barbarian rod & most bait types<br> (with 15 Agility & 15 Strength)");
                case 2 :
                    return(55, raw_tuna, "Tuna<br> (with 35 Strength)");
                case 3 :
                    return(55, tempoross_raw_harpoonfish, "Harpoonfish<br> (with 35 Strength)");
                case 4 :
                    return(58, brut_spawning_salmon, "Leaping salmon - Barbarian rod & most bait types<br> (with 30 Agility & 30 Strength)");
                case 5 :
                    return(70, brut_sturgeon, "Leaping sturgeon - Barbarian rod & most bait types<br> (with 45 Agility & 45 Strength)");
                case 6 :
                    return(70, raw_swordfish, "Swordfish<br> (with 50 Strength)");
                case 7 :
                    return(96, raw_shark, "Shark<br> (with 76 Strength)");
            }
            return(-1, null, "");
        }
        if ($int1 = 8) {
            switch_int ($int2) {
                case 0 :
                    return(1, net, "Small fishing net");
                case 1 :
                    return(1, fishing_rod, "Fishing rod");
                case 2 :
                    return(1, big_net, "Members: Big fishing net");
                case 3 :
                    return(1, harpoon, "Harpoon");
                case 4 :
                    return(1, fly_fishing_rod, "Fly fishing rod");
                case 5 :
                    return(1, lobster_pot, "Lobster pot");
                case 6 :
                    return(1, tbwt_karambwan_vessel, "Members: Karambwan vessel (after Tai Bwo Wannai Trio)");
                case 7 :
                    return(34, trawler_reward_hat, "Members: Angler's outfit");
                case 8 :
                    return(43, aerial_fishing_gloves_no_bird, "Members: Cormorant's glove<br>(with 35 hunter)");
                case 9 :
                    return(48, brut_fishing_rod, "Members: Barbarian rod<br>(with 15 strength & 15 agility)");
                case 10 :
                    return(61, dragon_harpoon, "Members: Dragon harpoon");
                case 11 :
                    return(71, crystal_harpoon, "Members: Crystal harpoon<br>(after Song of the Elves)");
                case 12 :
                    return(75, infernal_harpoon, "Members: Infernal harpoon<br>(with 85 Cooking)");
            }
            return(-1, null, "");
        }
        if ($int1 = 9) {
            switch_int ($int2) {
                case 0 :
                    return(1, raids_fish0_raw, "Pysk fish");
                case 1 :
                    return(15, raids_fish1_raw, "Suphi fish");
                case 2 :
                    return(30, raids_fish2_raw, "Leckish fish");
                case 3 :
                    return(45, raids_fish3_raw, "Brawk fish");
                case 4 :
                    return(60, raids_fish4_raw, "Mycil fish");
                case 5 :
                    return(75, raids_fish5_raw, "Roqed fish");
                case 6 :
                    return(90, raids_fish6_raw, "Kyren fish");
            }
            return(-1, null, "");
        }
        if ($int1 = 10) {
            switch_int ($int2) {
                case 0 :
                    return(35, tempoross_harpoonfish, "Members: Fighting Tempoross");
                case 1 :
                    return(47, fossil_puffer_fish, "Members: Accessing drift net fishing on Fossil Island (with 44 hunter)");
                case 2 :
                    return(65, tbwt_raw_karambwan, "Members: Karambwan - Karambwan vessel");
                case 3 :
                    return(79, raw_seaturtle, "Members: Sea turtle - Trawler & Tempoross");
                case 4 :
                    return(81, raw_mantaray, "Members: Manta ray - Trawler & Tempoross");
            }
            return(-1, null, "");
        }
        return(-1, null, "");
    case 16 :
        if ($int1 = 0) {
            switch_int ($int2) {
                case 0 :
                    return(-1, cooking_pot, "Cooking is a skill that lets you make all kinds of delicious food that will typically restore your Hitpoints, amongst providing other benefits.");
                case 1 :
                    return(-1, shrimp, "At its most basic, Cooking can be done by simply taking raw meats and fish to either a fire or a range. You'll get better results overall if you use a range, though.");
                case 2 :
                    return(-1, bread, "Some foods will require you to prepare your ingredients before you can cook them. For example, you first need to mix flour and water into a dough before you can bake them into bread.");
                case 3 :
                    return(-1, lobster, "As your Cooking level increases, you'll get access to an increasing list of recipes. You'll also find that you accidentally burn your food less of the time as well.");
            }
        }
        if ($int1 = 1) {
            switch_int ($int2) {
                case 0 :
                    return(1, cooked_meat, "Meat");
                case 1 :
                    return(1, xbows_sinew, "Members: Sinew<br>(made by drying beef or bear meat on a range)");
                case 2 :
                    return(1, shrimp, "Shrimp");
                case 3 :
                    return(1, cooked_chicken, "Chicken");
                case 4 :
                    return(1, cooked_rabbit, "Members: Rabbit");
                case 5 :
                    return(1, anchovies, "Anchovies");
                case 6 :
                    return(1, sardine, "Sardine");
                case 7 :
                    return(1, tbwt_poorly_cooked_karambwan, "Members: Karambwan");
                case 8 :
                    return(1, ugthanki_kebab, "Members: Ugthanki kebab");
                case 9 :
                    return(5, herring, "Herring");
                case 10 :
                    return(10, mackerel, "Members: Mackerel");
                case 11 :
                    return(11, spit_roasted_bird_meat, "Members: Roasted bird meat");
                case 12 :
                    return(12, snail_corpse_cooked1, "Members: Thin snail");
                case 13 :
                    return(15, trout, "Trout");
                case 14 :
                    return(16, tbw_spider_on_stick_cooked, "Members: Spider");
                case 15 :
                    return(16, spit_roasted_rabbit_meat, "Members: Roasted rabbit");
                case 16 :
                    return(17, snail_corpse_cooked2, "Members: Lean snail");
                case 17 :
                    return(18, cod, "Members: Cod");
                case 18 :
                    return(20, pike, "Pike");
                case 19 :
                    return(21, spit_roasted_beast_meat, "Members: Roasted beast meat");
                case 20 :
                    return(21, hundred_pirate_giant_crab_meat_5, "Members: Giant crab meat");
                case 21 :
                    return(22, snail_corpse_cooked3, "Members: Fat snail");
                case 22 :
                    return(23, wildkebbit_cooked, "Members: Wild kebbit");
                case 23 :
                    return(25, salmon, "Salmon");
                case 24 :
                    return(28, mort_slimey_eel_cooked, "Members: Slimy eel");
                case 25 :
                    return(30, tuna, "Tuna");
                case 26 :
                    return(30, cooked_chompy, "Members: Roasted chompy");
                case 27 :
                    return(30, cooked_lizard, "Members: Mossy Lizard");
                case 28 :
                    return(30, bream_fish_cooked, "Members: Bream");
                case 29 :
                    return(31, hundred_pirate_fishcake, "Members: Fishcakes");
                case 30 :
                    return(31, larupia_cooked, "Members: Larupia");
                case 31 :
                    return(32, barbkebbit_cooked, "Members: Barb-tailed kebbit");
                case 32 :
                    return(35, hunting_fish_special, "Members: Rainbow fish");
                case 33 :
                    return(35, forestry_ration, "Members: Forester's ration<br>(with 35 Woodcutting)");
                case 34 :
                    return(38, cave_eel, "Members: Cave eel");
                case 35 :
                    return(40, lobster, "Lobster");
                case 36 :
                    return(41, 100_jubbly_meat_cooked, "Members: Jubbly");
                case 37 :
                    return(41, graahk_cooked, "Members: Graahk");
                case 38 :
                    return(43, bass, "Members: Bass");
                case 39 :
                    return(45, swordfish, "Swordfish");
                case 40 :
                    return(51, kyatt_cooked, "Members: Kyatt");
                case 41 :
                    return(53, lava_eel, "Members: Lava eel");
                case 42 :
                    return(59, fennecfox_cooked, "Members: Pyre fox");
                case 43 :
                    return(62, monkfish, "Members: Monkfish");
                case 44 :
                    return(68, antelopesun_cooked, "Members: Sunlight antelope");
                case 45 :
                    return(72, snakeboss_eel, "Members: Dissect sacred eels");
                case 46 :
                    return(80, shark, "Members: Shark");
                case 47 :
                    return(82, seaturtle, "Members: Sea turtle");
                case 48 :
                    return(82, dashingkebbit_cooked, "Members: Dashing kebbit");
                case 49 :
                    return(84, anglerfish, "Members: Anglerfish");
                case 50 :
                    return(90, dark_crab, "Members: Dark crab");
                case 51 :
                    return(91, mantaray, "Members: Manta ray");
                case 52 :
                    return(92, antelopemoon_cooked, "Members: Moonlight antelope");
            }
            return(-1, null, "");
        }
        if ($int1 = 2) {
            switch_int ($int2) {
                case 0 :
                    return(1, bread, "Bread");
                case 1 :
                    return(58, pitta_bread, "Members: Pitta bread");
                case 2 :
                    return(-1, invis_rod, "1. Pick some grain and take it to a windmill to make flour.");
                case 3 :
                    return(-1, invis_rod, "2. Use a pot to collect the flour you have made.");
                case 4 :
                    return(-1, invis_rod, "3. Fill a bucket or jug with water from a sink or fountain.");
                case 5 :
                    return(-1, invis_rod, "4. Mix the flour and water to make some bread dough.");
                case 6 :
                    return(-1, invis_rod, "5. Cook the dough by using it with a stove.");
            }
            return(-1, null, "");
        }
        if ($int1 = 3) {
            switch_int ($int2) {
                case 0 :
                    return(10, redberry_pie, "Redberry pie");
                case 1 :
                    return(20, meat_pie, "Meat pie");
                case 2 :
                    return(29, mud_pie, "Members: Mud pie");
                case 3 :
                    return(30, apple_pie, "Apple pie");
                case 4 :
                    return(34, garden_pie, "Members: Garden pie");
                case 5 :
                    return(47, fish_pie, "Members: Fish pie");
                case 6 :
                    return(52, botanical_pie, "Members: Botanical pie");
                case 7 :
                    return(60, mushroom_pie, "Members: Mushroom pie");
                case 8 :
                    return(70, admiral_pie, "Members: Admiral pie");
                case 9 :
                    return(73, dragonfruit_pie, "Members: Dragonfruit pie");
                case 10 :
                    return(85, wild_pie, "Members: Wild pie");
                case 11 :
                    return(95, summer_pie, "Members: Summer pie");
                case 12 :
                    return(-1, invis_rod, "To make a pie:");
                case 13 :
                    return(-1, invis_rod, "1. Mix flour and water to make pastry dough.");
                case 14 :
                    return(-1, invis_rod, "2. Place the dough in an empty pie dish.");
                case 15 :
                    return(-1, invis_rod, "3. Use your choice of filling with the empty pie (refer to pie recipe book).");
                case 16 :
                    return(-1, invis_rod, "4. Cook the pie by using it with a stove.");
            }
            return(-1, null, "");
        }
        if ($int1 = 4) {
            switch_int ($int2) {
                case 0 :
                    return(25, stew, "Stew");
                case 1 :
                    return(60, curry, "Members: Curry");
                case 2 :
                    return(-1, invis_rod, "To make stew:");
                case 3 :
                    return(-1, invis_rod, "1. Obtain a bowl and fill it with water from a sink or fountain.");
                case 4 :
                    return(-1, invis_rod, "2. Pick a potato and place it in the bowl.");
                case 5 :
                    return(-1, invis_rod, "3. Cook some meat and place it in the bowl.");
                case 6 :
                    return(-1, invis_rod, "4. Cook the stew by using it with a stove or fire.");
                case 7 :
                    return(-1, invis_rod, "After completing Evil Dave's miniquest<br>from Recipe for Disaster, I can add<br>spices to cooked stew.");
                case 8 :
                    return(-1, invis_rod, "To make curry: make uncooked stew as above. Before cooking, add some spices or 3 curry leaves.");
            }
            return(-1, null, "");
        }
        if ($int1 = 5) {
            switch_int ($int2) {
                case 0 :
                    return(35, plain_pizza, "Plain pizza");
                case 1 :
                    return(45, meat_pizza, "Meat pizza");
                case 2 :
                    return(55, anchovie_pizza, "Anchovy pizza");
                case 3 :
                    return(65, pineapple_pizza, "Members: Pineapple pizza");
                case 4 :
                    return(-1, invis_rod, "To make a pizza:");
                case 5 :
                    return(-1, invis_rod, "1. Mix flour and water to make a pizza base.");
                case 6 :
                    return(-1, invis_rod, "2. Add a tomato to the pizza.");
                case 7 :
                    return(-1, invis_rod, "3. Add some cheese to the pizza.");
                case 8 :
                    return(-1, invis_rod, "4. Cook the pizza by using it with a stove.");
                case 9 :
                    return(-1, invis_rod, "5. Add your choice of topping to the pizza.");
            }
            return(-1, null, "");
        }
        if ($int1 = 6) {
            switch_int ($int2) {
                case 0 :
                    return(40, cake, "Cake");
                case 1 :
                    return(50, chocolate_cake, "Chocolate cake");
                case 2 :
                    return(-1, invis_rod, "To make a cake:");
                case 3 :
                    return(-1, invis_rod, "1. Mix flour, eggs and milk together in a cake tin.");
                case 4 :
                    return(-1, invis_rod, "2. Cook the cake by using it with a stove.");
                case 5 :
                    return(-1, invis_rod, "3. Optional: Buy some chocolate and add it to the cake to make a chocolate cake.");
            }
            return(-1, null, "");
        }
        if ($int1 = 7) {
            switch_int ($int2) {
                case 0 :
                    return(35, jug_wine, "Wine");
                case 1 :
                    return(65, wine_of_zamorak, "Members: Wine of Zamorak");
                case 2 :
                    return(-1, invis_rod, "To make wine:");
                case 3 :
                    return(-1, invis_rod, "1. Fill a jug with water.");
                case 4 :
                    return(-1, invis_rod, "2. Use grapes with the jug of water.");
                case 5 :
                    return(-1, invis_rod, "3. Wait until the wine ferments.");
                case 6 :
                    return(-1, invis_rod, "Wine will ferment when left in<br>your inventory or the bank.");
            }
            return(-1, null, "");
        }
        if ($int1 = 8) {
            switch_int ($int2) {
                case 0 :
                    return(20, cup_of_nettletea, "Nettle tea");
                case 1 :
                    return(-1, invis_rod, "To make nettle tea:");
                case 2 :
                    return(-1, invis_rod, "1. Fill a bowl with water.");
                case 3 :
                    return(-1, invis_rod, "2. Put some picked nettles into the bowl of water.");
                case 4 :
                    return(-1, invis_rod, "3. Boil the nettle-water by using it with a range or a fire.");
                case 5 :
                    return(-1, invis_rod, "4. Use the bowl of nettle tea with a cup.");
                case 6 :
                    return(-1, invis_rod, "5. If you take milk, use a bucket of milk on the nettle tea.");
            }
            return(-1, null, "");
        }
        if ($int1 = 9) {
            switch_int ($int2) {
                case 0 :
                    return(14, cider, "Cider<br>4 Apple mush");
                case 1 :
                    return(19, dwarven_stout, "Dwarven Stout<br>4 Hammerstone hops");
                case 2 :
                    return(24, asgarnian_ale, "Asgarnian Ale<br>4 Asgarnian hops");
                case 3 :
                    return(29, greenmans_ale, "Greenman's Ale<br>4 Harralander leaves");
                case 4 :
                    return(34, wizards_mind_bomb, "Wizard's Mind Bomb<br>4 Yanillian hops");
                case 5 :
                    return(39, dragon_bitter, "Dragon Bitter<br>4 Krandorian hops");
                case 6 :
                    return(44, moonlight_mead, "Moonlight Mead<br>4 Bittercap mushrooms");
                case 7 :
                    return(49, axemans_folly, "Axeman's Folly<br>1 Oak root");
                case 8 :
                    return(54, chefs_delight, "Chef's Delight<br>4 Portions of chocolate dust");
                case 9 :
                    return(59, slayers_respite, "Slayer's Respite<br>4 Wildblood hops");
            }
            return(-1, null, "");
        }
        if ($int1 = 10) {
            switch_int ($int2) {
                case 0 :
                    return(7, potato_baked, "Baked potato");
                case 1 :
                    return(9, bowl_chilli, "Spicy sauce (topping ingredient)");
                case 2 :
                    return(11, "bowl_chilli+carne", "Chilli con carne (topping)");
                case 3 :
                    return(13, bowl_egg_scrambled, "Scrambled egg (topping ingredient)");
                case 4 :
                    return(23, "bowl_egg+tomato", "Scrambled egg and tomato (topping)");
                case 5 :
                    return(28, sweetcorn_cooked, "Sweetcorn");
                case 6 :
                    return(39, potato_butter, "Baked potato with butter");
                case 7 :
                    return(41, "potato_chilli+carne", "Baked potato with chilli con carne");
                case 8 :
                    return(42, bowl_onion_fried, "Fried onion (topping ingredient)");
                case 9 :
                    return(46, bowl_mushroom_fried, "Fried mushroom (topping ingredient)");
                case 10 :
                    return(47, potato_cheese, "Baked potato with butter and cheese");
                case 11 :
                    return(51, "potato_egg+tomato", "Baked potato with egg and tomato");
                case 12 :
                    return(57, "bowl_mushroom+onion", "Fried mushroom and onion (topping)");
                case 13 :
                    return(64, "potato_mushroom+onion", "Baked potato with mushroom and onion");
                case 14 :
                    return(67, "bowl_tuna+sweetcorn", "Tuna and sweetcorn (topping)");
                case 15 :
                    return(68, "potato_tuna+sweetcorn", "Baked potato with tuna and sweetcorn");
                case 16 :
                    return(-1, invis_rod, "To make baked potatoes with toppings:");
                case 17 :
                    return(-1, invis_rod, "1. Bake the potato on a range.");
                case 18 :
                    return(-1, invis_rod, "2. Add some butter.");
                case 19 :
                    return(-1, invis_rod, "3. If needed, combine topping ingredients by chopping them into a bowl.");
                case 20 :
                    return(-1, invis_rod, "Ingredients for toppings:");
                case 21 :
                    return(-1, invis_rod, "1. Chilli con carne: meat & spicy sauce (made from garlic and gnome spice)");
                case 22 :
                    return(-1, invis_rod, "2. Egg and tomato: scrambled egg & tomato");
                case 23 :
                    return(-1, invis_rod, "3. Mushroom and onion: fried bittercap mushroom & fried onion");
                case 24 :
                    return(-1, invis_rod, "4. Tuna and sweetcorn: tuna & cooked sweetcorn");
            }
            return(-1, null, "");
        }
        if ($int1 = 11) {
            switch_int ($int2) {
                case 0 :
                    return(21, pot_of_cream, "Cream");
                case 1 :
                    return(38, pot_of_butter, "Butter");
                case 2 :
                    return(48, cheese, "Cheese");
                case 3 :
                    return(-1, invis_rod, "To make dairy products:");
                case 4 :
                    return(-1, invis_rod, "1. Get a bucket of milk, a pot of cream or a pot of butter.");
                case 5 :
                    return(-1, invis_rod, "2. Use the milk, cream or butter in a churn.");
                case 6 :
                    return(-1, invis_rod, "3. Milk can be churned into cream, then into butter, then into cheese.");
            }
            return(-1, null, "");
        }
        if ($int1 = 12) {
            switch_int ($int2) {
                case 0 :
                    return(6, fruit_blast, "Fruit Blast");
                case 1 :
                    return(8, pineapple_punch, "Pineapple Punch");
                case 2 :
                    return(10, toad_crunchies, "Toad crunchies");
                case 3 :
                    return(12, spicy_crunchies, "Spicy crunchies");
                case 4 :
                    return(14, worm_crunchies, "Worm crunchies");
                case 5 :
                    return(16, chocchip_crunchies, "Chocolate chip crunchies");
                case 6 :
                    return(18, wizard_blizzard, "Wizard Blizzard");
                case 7 :
                    return(20, sgg, "Short Green Guy (SGG)");
                case 8 :
                    return(25, fruit_batta, "Fruit batta");
                case 9 :
                    return(26, toad_batta, "Toad batta");
                case 10 :
                    return(27, worm_batta, "Worm batta");
                case 11 :
                    return(28, vegetable_batta, "Vegetable batta");
                case 12 :
                    return(29, "cheese+tom_batta", "Cheese and tomato batta");
                case 13 :
                    return(30, worm_hole, "Worm hole");
                case 14 :
                    return(32, drunk_dragon, "Drunk Dragon");
                case 15 :
                    return(33, chocolate_saturday, "Chocolate Saturday");
                case 16 :
                    return(35, veg_ball, "Vegetable ball");
                case 17 :
                    return(37, blurberry_special, "Blurberry Special");
                case 18 :
                    return(40, tangled_toads_legs, "Tangled toads' legs");
                case 19 :
                    return(42, chocolate_bomb, "Chocolate bomb");
            }
            return(-1, null, "");
        }
        if ($int1 = 13) {
            switch_int ($int2) {
                case 0 :
                    return(1, raids_fish0_cooked, "Members: Chambers of Xeric - Pysk fish");
                case 1 :
                    return(1, raids_bat0_cooked, "Members: Chambers of Xeric - Guanic bat");
                case 2 :
                    return(7, guppy, "Ritual Offering - Guppy");
                case 3 :
                    return(15, raids_fish1_cooked, "Members: Chambers of Xeric - Suphi fish");
                case 4 :
                    return(15, raids_bat1_cooked, "Members: Chambers of Xeric - Prael bat");
                case 5 :
                    return(20, cavefish, "Ritual Offering - Cavefish");
                case 6 :
                    return(30, raids_fish2_cooked, "Members: Chambers of Xeric - Leckish fish");
                case 7 :
                    return(30, raids_bat2_cooked, "Members: Chambers of Xeric - Giral bat");
                case 8 :
                    return(33, tetra, "Ritual Offering - Tetra");
                case 9 :
                    return(45, raids_fish3_cooked, "Members: Chambers of Xeric - Brawk fish");
                case 10 :
                    return(45, raids_bat3_cooked, "Members: Chambers of Xeric - Phluxia bat");
                case 11 :
                    return(46, catfish, "Members: Ritual Offering - Catfish");
                case 12 :
                    return(60, raids_fish4_cooked, "Members: Chambers of Xeric - Mycil fish");
                case 13 :
                    return(60, raids_bat4_cooked, "Members: Chambers of Xeric - Kryket bat");
                case 14 :
                    return(75, raids_fish5_cooked, "Members: Chambers of Xeric - Roqed fish");
                case 15 :
                    return(75, raids_bat5_cooked, "Members: Chambers of Xeric - Murng bat");
                case 16 :
                    return(90, raids_fish6_cooked, "Members: Chambers of Xeric - Kyren fish");
                case 17 :
                    return(90, raids_bat6_cooked, "Members: Chambers of Xeric - Psykk bat");
            }
            return(-1, null, "");
        }
        return(-1, null, "");
    case 17 :
        return(~skill_guide_data_firemaking($int1, $int2));
    case 18 :
        if ($int1 = 0) {
            switch_int ($int2) {
                case 0 :
                    return(-1, poh_tree_3, "Woodcutting allows you to chop down trees to obtain logs. Most trees in the game can be chopped down with an axe.");
                case 1 :
                    return(-1, logs, "Increasing your Woodcutting level will give you a higher chance of successfully chopping a tree. You'll also gain access to more trees to cut down.");
                case 2 :
                    return(-1, rune_axe, "In addition to this, higher Woodcutting levels grant access to more powerful axes, which also increase the chance of chopping trees. Note that you can still use an axe in your inventory if you have the Woodcutting level for it, even if you don't have the Attack level to equip it.");
            }
        }
        if ($int1 = 1) {
            switch_int ($int2) {
                case 0 :
                    return(1, logs, "Normal trees");
                case 1 :
                    return(1, achey_tree_logs, "Members: Achey trees");
                case 2 :
                    return(10, thatching_spar_light, "Members: Light jungle");
                case 3 :
                    return(15, oak_logs, "Oak trees");
                case 4 :
                    return(20, thatching_spar_med, "Members: Medium jungle");
                case 5 :
                    return(30, willow_logs, "Willow trees");
                case 6 :
                    return(35, thatching_spar_dense, "Members: Dense jungle");
                case 7 :
                    return(35, teak_logs, "Members: Teak trees");
                case 8 :
                    return(42, juniper_logs, "Members: Juniper trees");
                case 9 :
                    return(45, maple_logs, "Maple trees");
                case 10 :
                    return(45, hollow_bark, "Members: Hollow trees");
                case 11 :
                    return(50, mahogany_logs, "Members: Mahogany trees");
                case 12 :
                    return(54, arctic_pine_log, "Members: Arctic pine trees");
                case 13 :
                    return(60, yew_logs, "Yew trees");
                case 14 :
                    return(62, blisterwood_logs, "Members: Blisterwood tree");
                case 15 :
                    return(65, fossil_sulliuscep_cap, "Members: Sulliuscep mushroom trees");
                case 16 :
                    return(75, magic_logs, "Members: Magic trees");
                case 17 :
                    return(90, redwood_logs, "Members: Redwood trees");
            }
            return(-1, null, "");
        }
        if ($int1 = 2) {
            switch_int ($int2) {
                case 0 :
                    return(1, bronze_axe, "Bronze axe");
                case 1 :
                    return(1, bronze_axe_2h, "Members: Bronze felling axe");
                case 2 :
                    return(1, iron_axe, "Iron axe");
                case 3 :
                    return(1, iron_axe_2h, "Members: Iron felling axe");
                case 4 :
                    return(6, steel_axe, "Steel axe");
                case 5 :
                    return(6, steel_axe_2h, "Members: Steel felling axe");
                case 6 :
                    return(11, black_axe, "Black axe");
                case 7 :
                    return(11, black_axe_2h, "Members: Black felling axe");
                case 8 :
                    return(21, mithril_axe, "Mithril axe");
                case 9 :
                    return(21, mithril_axe_2h, "Members: Mithril felling axe");
                case 10 :
                    return(31, adamant_axe, "Adamant axe");
                case 11 :
                    return(31, adamant_axe_2h, "Members: Adamant felling axe");
                case 12 :
                    return(41, rune_axe, "Rune axe");
                case 13 :
                    return(41, rune_axe_2h, "Members: Rune felling axe");
                case 14 :
                    return(41, trail_gilded_axe, "Gilded axe");
                case 15 :
                    return(61, dragon_axe, "Members: Dragon axe");
                case 16 :
                    return(61, dragon_axe_2h, "Members: Dragon felling axe");
                case 17 :
                    return(61, 3a_axe, "Members: 3rd age axe");
                case 18 :
                    return(61, 3a_axe_2h, "Members: 3rd age felling axe");
                case 19 :
                    return(61, infernal_axe, "Members: Infernal axe<br>(with 85 Firemaking)");
                case 20 :
                    return(71, crystal_axe, "Members: Crystal axe<br>(after Song of the Elves)");
                case 21 :
                    return(71, crystal_axe_2h, "Members: Crystal felling axe<br>(after Song of the Elves)");
            }
            return(-1, null, "");
        }
        if ($int1 = 3) {
            switch_int ($int2) {
                case 0 :
                    return(1, forestry_kit, "Forestry kit");
                case 1 :
                    return(35, forestry_ration, "Members: Forester's ration<br>(with 35 Cooking)");
                case 2 :
                    return(35, forestry_secateurs_attachment, "Members: Secateurs Attachment<br>(with 35 Smithing)");
                case 3 :
                    return(50, forestry_clothes_pouch, "Members: Clothes Pouch<br>(with 50 Crafting)");
                case 4 :
                    return(68, nature_offerings, "Members: Nature Offerings<br>(with 50 Farming)");
                case 5 :
                    return(75, forestry_sturdy_harness, "Members: Sturdy Harness<br>(with 75 Smithing)");
            }
            return(-1, null, "");
        }
        if ($int1 = 4) {
            switch_int ($int2) {
                case 0 :
                    return(12, canoeing_paddle, "Log canoe");
                case 1 :
                    return(27, canoeing_paddle, "Dugout canoe");
                case 2 :
                    return(42, canoeing_paddle, "Stable dugout canoe");
                case 3 :
                    return(44, ramble_lumberjack_top, "Members: Lumberjack and Forestry outfit.");
                case 4 :
                    return(56, fremmenik_round_shield, "Members: Fremennik round shield");
                case 5 :
                    return(56, arctic_pine_split, "Members: Split arctic pine logs");
                case 6 :
                    return(57, canoeing_paddle, "Waka canoe");
            }
            return(-1, null, "");
        }
        return(-1, null, "");
    case 12 :
        if ($int1 = 0) {
            switch_int ($int2) {
                case 0 :
                    return(-1, blankrune, "Runecraft is the skill that allows you to convert essences into runes, which you can use to cast spells.");
                case 1 :
                    return(-1, air_talisman, "To create runes, you'll first need some essence and a talisman of the rune you want to make. You can use the talisman to both locate and access the runic altar, which is where the runes are crafted.");
                case 2 :
                    return(-1, firerune, "Higher Runecraft levels will allow you to craft more kinds of runes. At higher levels, you'll also be able to make multiple runes per essence.");
            }
        }
        if ($int1 = 1) {
            switch_int ($int2) {
                case 0 :
                    return(1, airrune, "Air runes");
                case 1 :
                    return(2, mindrune, "Mind runes");
                case 2 :
                    return(5, waterrune, "Water runes");
                case 3 :
                    return(6, mistrune, "Members: Mist runes");
                case 4 :
                    return(9, earthrune, "Earth runes");
                case 5 :
                    return(10, dustrune, "Members: Dust runes");
                case 6 :
                    return(13, mudrune, "Members: Mud runes");
                case 7 :
                    return(14, firerune, "Fire runes");
                case 8 :
                    return(15, smokerune, "Members: Smoke runes");
                case 9 :
                    return(19, steamrune, "Members: Steam runes");
                case 10 :
                    return(20, bodyrune, "Body runes");
                case 11 :
                    return(23, lavarune, "Members: Lava runes");
                case 12 :
                    return(27, cosmicrune, "Members: Cosmic runes");
                case 13 :
                    return(33, sunfirerune, "Members: Sunfire runes");
                case 14 :
                    return(35, chaosrune, "Members: Chaos runes");
                case 15 :
                    return(40, astralrune, "Members: Astral runes");
                case 16 :
                    return(44, naturerune, "Members: Nature runes");
                case 17 :
                    return(54, lawrune, "Members: Law runes");
                case 18 :
                    return(65, deathrune, "Members: Death runes");
                case 19 :
                    return(77, bloodrune, "Members: Blood runes");
                case 20 :
                    return(90, soulrune, "Members: Soul runes");
                case 21 :
                    return(95, wrathrune, "Members: Wrath runes");
            }
            return(-1, null, "");
        }
        if ($int1 = 2) {
            switch_int ($int2) {
                case 0 :
                    return(-1, invis_rod, "As your Runecraft skill develops, you will be able to craft multiple runes from one piece of essence. You only receive experience for each piece of essence crafted, not each rune crafted.");
                case 1 :
                    return(11, airrune, "2 Air runes per essence");
                case 2 :
                    return(14, mindrune, "2 Mind runes per essence");
                case 3 :
                    return(19, waterrune, "2 Water runes per essence");
                case 4 :
                    return(22, airrune, "3 Air runes per essence");
                case 5 :
                    return(26, earthrune, "2 Earth runes per essence");
                case 6 :
                    return(28, mindrune, "3 Mind runes per essence");
                case 7 :
                    return(33, airrune, "4 Air runes per essence");
                case 8 :
                    return(35, firerune, "2 Fire runes per essence");
                case 9 :
                    return(38, waterrune, "3 Water runes per essence");
                case 10 :
                    return(42, mindrune, "4 Mind runes per essence");
                case 11 :
                    return(44, airrune, "5 Air runes per essence");
                case 12 :
                    return(46, bodyrune, "2 Body runes per essence");
                case 13 :
                    return(49, sunfirerune, "2 Sunfire runes per essence");
                case 14 :
                    return(52, earthrune, "3 Earth runes per essence");
                case 15 :
                    return(55, airrune, "6 Air runes per essence");
                case 16 :
                    return(56, mindrune, "5 Mind runes per essence");
                case 17 :
                    return(57, waterrune, "4 Water runes per essence");
                case 18 :
                    return(59, cosmicrune, "Members: 2 Cosmic runes per essence");
                case 19 :
                    return(66, airrune, "7 Air runes per essence");
                case 20 :
                    return(70, mindrune, "6 Mind runes per essence");
                case 21 :
                    return(70, firerune, "3 Fire runes per essence");
                case 22 :
                    return(74, chaosrune, "Members: 2 Chaos runes per essence");
                case 23 :
                    return(76, waterrune, "5 Water runes per essence");
                case 24 :
                    return(77, airrune, "8 Air runes per essence");
                case 25 :
                    return(78, earthrune, "4 Earth runes per essence");
                case 26 :
                    return(82, astralrune, "Members: 2 Astral runes per essence");
                case 27 :
                    return(84, mindrune, "7 Mind runes per essence");
                case 28 :
                    return(88, airrune, "9 Air runes per essence");
                case 29 :
                    return(91, naturerune, "Members: 2 Nature runes per essence");
                case 30 :
                    return(92, bodyrune, "3 Body runes per essence");
                case 31 :
                    return(95, waterrune, "6 Water runes per essence");
                case 32 :
                    return(95, lawrune, "Members: 2 Law runes per essence");
                case 33 :
                    return(98, mindrune, "8 Mind runes per essence");
                case 34 :
                    return(98, sunfirerune, "3 Sunfire runes per essence");
                case 35 :
                    return(99, airrune, "10 Air runes per essence");
                case 36 :
                    return(99, deathrune, "Members: 2 Death runes per essence");
            }
            return(-1, null, "");
        }
        if ($int1 = 3) {
            switch_int ($int2) {
                case 0 :
                    return(-1, invis_rod, "Pouches come in various sizes which allow you to carry extra essence in them. As you use the pouches they degrade and store less essence, just speak to the Dark Mage at the centre of the Abyss to restore them.");
                case 1 :
                    return(1, rcu_pouch_small, "Small pouch: Holds 3 extra essence");
                case 2 :
                    return(25, rcu_pouch_medium, "Medium pouch: Holds 6 extra essence");
                case 3 :
                    return(25, rcu_pouch_colossal, "Colossal pouch: Holds up to 40 essence, depending on your Runecraft level");
                case 4 :
                    return(50, rcu_pouch_large, "Large pouch: Holds 9 extra essence");
                case 5 :
                    return(75, rcu_pouch_giant, "Giant pouch: Holds 12 extra essence");
            }
            return(-1, null, "");
        }
        if ($int1 = 4) {
            switch_int ($int2) {
                case 0 :
                    return(42, swampbark_greaves, "Swampbark boots and gauntlets");
                case 1 :
                    return(46, swampbark_helm, "Swampbark helm");
                case 2 :
                    return(48, swampbark_body, "Swampbark body and legs");
                case 3 :
                    return(50, wint_burnt_page, "Burnt page (via desiccated pages)");
                case 4 :
                    return(50, soaked_page, "Soaked page (via desiccated pages)");
                case 5 :
                    return(50, soiled_page, "Soiled page (via desiccated pages)");
                case 6 :
                    return(60, eternal_boots, "Eternal boots (with 60 Magic)");
                case 7 :
                    return(60, pegasian_boots, "Pegasian boots (with 60 Magic)");
                case 8 :
                    return(60, primordial_boots, "Primordial boots (with 60 Magic)");
                case 9 :
                    return(77, bloodbark_greaves, "Bloodbark boots and gauntlets");
                case 10 :
                    return(79, bloodbark_helm, "Bloodbark helm");
                case 11 :
                    return(81, bloodbark_body, "Bloodbark body and legs");
            }
            return(-1, null, "");
        }
        if ($int1 = 5 & $int2 = 0) {
            return(27, tote_amulet, "Guardians of the Rift<br>(after Temple of the Eye)");
        }
        return(-1, null, "");
    case 20 :
        return(~skill_guide_data_slayer($int1, $int2));
    case 21 :
        return(~skill_guide_data_farming($int1, $int2));
    case 22 :
        return(~skill_guide_data_construction($int1, $int2));
    case 23 :
        return(~skill_guide_data_hunter($int1, $int2));
}
return(-1, null, "");
