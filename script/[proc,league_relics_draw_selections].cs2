// 3189
[proc,league_relics_draw_selections](component $component0, component $component1, component $component2, component $component3, component $component4, component $component5, component $component6, component $component7, component $component8, component $component9, component $component10, component $component11, component $component12, int $int13)
cc_deleteall($component1);
cc_deleteall($component2);
cc_deleteall($component3);
cc_deleteall($component4);
cc_deleteall($component5);
cc_deleteall($component0);
cc_deleteall($component10);
cc_deleteall($component11);
def_struct $struct14 = enum(int, struct, enum_2670, %varplayerbit_10032);
def_int $rgb15 = 0xff981f;
def_enum $enum16 = null;
def_struct $struct17 = null;
def_int $int18 = 0;
def_int $int19 = 0;
def_enum $enum20 = null;
if ($struct14 ! null) {
    $enum16 = struct_param($struct14, param_870);
    $rgb15 = struct_param($struct14, param_1027);
}
cc_create($component0, ^iftype_graphic, 0);
cc_setsize(0, 0, ^setsize_minus, ^setsize_minus);
cc_setposition(0, 0, ^setpos_abs_left, ^setpos_abs_top);
cc_setgraphic(tradebacking_light);
if_sethide(false, $component6);
if_sethide(true, $component7);
if_sethide(true, $component9);
if_sethide(true, $component8);
if ($enum16 ! null) {
    $int18 = enum_getoutputcount($enum16);
}
def_int $int21 = 0;
~leagues_menu_button($component10, $int21, $component11, $component12);
$int21 = 0;
~league_create_dropdown($component10, $component11, $component12, $int21, 2);
if (cc_find(interface_655:com2, $int13) = ^true) {
    cc_setcolour($rgb15);
}
def_int $int22 = if_getwidth($component6);
def_int $int23 = calc(if_getheight($component6) - 5);
def_int $int24 = 0;
def_int $int25 = 0;
def_int $int26 = 0;
def_int $int27 = 0;
def_int $int28 = 0;
if ($int18 > 0) {
    $int24 = calc($int22 / $int18);
    $int27 = calc(($int22 - $int24 * $int18) / 2);
}
def_int $int29 = -1;
def_string $string0 = "";
def_int $int30 = 0;
def_int $int31 = 0;
def_int $rgb32 = null;
def_int $rgb33 = null;
def_int $rgb34 = null;
def_int $rgb35 = null;
def_int $int36 = 0;
def_int $int37 = 0;
def_struct $struct38 = null;
def_graphic $graphic39 = null;
def_string $string1 = "";
def_int $int40 = -1;
def_struct $struct41 = null;
def_int $int42 = 0;
def_int $int43 = 0;
def_int $int44 = 0;
while ($int42 < $int18) {
    $struct17 = enum(int, struct, $enum16, $int42);
    $enum20 = struct_param($struct17, param_878);
    switch_int ($int42) {
        case 0 :
            $int40 = %varplayerbit_10049;
        case 1 :
            $int40 = %varplayerbit_10050;
        case 2 :
            $int40 = %varplayerbit_10051;
        case 3 :
            $int40 = %varplayerbit_10052;
        case 4 :
            $int40 = %varplayerbit_10053;
        case 5 :
            $int40 = %varplayerbit_11696;
        case default :
            $int40 = 0;
    }
    $struct41 = enum(int, struct, $enum20, $int40);
    if ($enum20 ! null & $struct41 ! null) {
        cc_create($component1, ^iftype_graphic, $int42);
        cc_setsize($int24, 0, ^setsize_abs, ^setsize_minus);
        cc_setposition($int27, 0, ^setpos_abs_left, ^setpos_abs_top);
        cc_setgraphic(tradebacking_dark);
        cc_settiling(true);
        $int29, $string0, $int30, $int31, $int37, $rgb33, $rgb35 = 255, "", 1, 0, 1, 0xaaaaaa, 0xdddddd;
    } else if ($int28 = 0 & $enum20 ! null & %varplayer_2615 >= struct_param($struct17, param_877)) {
        cc_create($component1, ^iftype_graphic, $int42);
        cc_setsize($int24, 0, ^setsize_abs, ^setsize_minus);
        cc_setposition($int27, 0, ^setpos_abs_left, ^setpos_abs_top);
        cc_setgraphic(tradebacking_light);
        cc_settiling(true);
        $int29, $string0, $int30, $int31, $int37, $rgb33, $rgb35 = 127, "", 1, 1, 1, null, null;
        $int28 = 1;
    } else {
        cc_create($component1, ^iftype_graphic, $int42);
        cc_setsize($int24, 0, ^setsize_abs, ^setsize_minus);
        cc_setposition($int27, 0, ^setpos_abs_left, ^setpos_abs_top);
        cc_setgraphic(tradebacking_dark);
        cc_settiling(true);
        $int29, $string0, $int30, $int31, $int37, $rgb33, $rgb35 = 255, "", 1, 0, 1, null, null;
    }
    cc_create($component0, ^iftype_text, calc($int42 + 1));
    cc_setsize($int24, 0, ^setsize_abs, ^setsize_minus);
    cc_setposition($int27, 0, ^setpos_abs_left, ^setpos_abs_top);
    cc_settextfont(p11_full);
    cc_settextalign(^settextalign_centre, ^settextalign_centre, 0);
    cc_settextshadow(true);
    cc_setcolour($rgb15);
    cc_settext("Tier <tostring(calc($int42 + 1))>");
    if ($enum20 ! null) {
        $int19 = enum_getoutputcount($enum20);
    } else {
        $int19 = 0;
    }
    if ($int19 > 0) {
        $int25 = calc($int23 / $int19);
        $int26 = calc(($int23 - $int25 * $int19) / 2);
    }
    $int43 = 0;
    while ($int43 < $int19) {
        $struct38 = enum(int, struct, $enum20, calc($int43 + 1));
        cc_create($component4, ^iftype_text, $int44);
        if (string_length($string0) > 0) {
            $string1 = $string0;
        } else {
            $string1 = struct_param($struct38, param_879);
        }
        cc_setsize(calc($int24 - 10), 32, ^setsize_abs, ^setsize_abs);
        cc_setposition(calc($int27 + 5), calc($int26 + $int25 / 2 + 1), ^setpos_abs_left, ^setpos_abs_top);
        cc_settext($string1);
        cc_settextfont(p11_full);
        if ($struct38 ! $struct41) {
            if ($rgb33 ! null) {
                $rgb32 = $rgb33;
            } else {
                $rgb32 = $rgb15;
            }
            if ($rgb35 ! null) {
                $rgb34 = $rgb35;
            } else {
                $rgb34 = ^white;
            }
        } else {
            $rgb32, $rgb34 = $rgb15, ^white;
        }
        cc_setcolour($rgb32);
        cc_settextshadow(true);
        cc_settextalign(^settextalign_centre, ^settextalign_centre, 0);
        cc_create($component2, ^iftype_graphic, $int44);
        cc_setsize(30, 30, ^setsize_abs, ^setsize_abs);
        cc_setposition(calc($int27 + $int24 / 2 - 15), calc($int26 + $int25 / 2 - 31), ^setpos_abs_left, ^setpos_abs_top);
        if ($struct38 = $struct41) {
            $graphic39, $int36 = struct_param($struct38, param_881), 0;
        } else {
            $graphic39, $int36 = struct_param($struct38, param_883), calc($int29 - 128);
        }
        cc_setgraphic($graphic39);
        cc_create($component3, ^iftype_graphic, $int44);
        cc_setsize(34, 34, ^setsize_abs, ^setsize_abs);
        cc_setposition(calc($int27 + $int24 / 2 - 17), calc($int26 + $int25 / 2 - 33), ^setpos_abs_left, ^setpos_abs_top);
        cc_setgraphic(struct_param($struct14, param_1026));
        if ($int29 ! -1) {
            cc_settrans($int29);
        } else {
            cc_settrans(255);
        }
        cc_create($component5, ^iftype_rectangle, $int44);
        cc_setsize($int24, $int25, ^setsize_abs, ^setsize_abs);
        cc_setposition($int27, $int26, ^setpos_abs_left, ^setpos_abs_top);
        cc_setfill(true);
        cc_settrans(255);
        if ($int37 = 1) {
            cc_setop(1, "View");
            cc_setopbase("<col=ff981f><$string1></col>");
            cc_setonop("league_relics_loading($component9, $int44, $component3, $int29, $component2, $graphic39, $component4, $rgb32)");
        }
        if ($int30 = 1 & ~on_mobile = false) {
            if ($int31 = 1) {
                cc_setonmouserepeat("league_relic_hover($component3, $int36, $component2, struct_param($struct38, param_881), $component4, $rgb34, $int44)");
            } else {
                cc_setonmouserepeat("league_relic_hover($component3, $int36, $component2, $graphic39, $component4, $rgb34, $int44)");
            }
            cc_setonmouseleave("league_relic_hover($component3, $int29, $component2, $graphic39, $component4, $rgb32, $int44)");
        }
        $int44 = calc($int44 + 1);
        $int26 = calc($int26 + $int25);
        $int43 = calc($int43 + 1);
    }
    $int27 = calc($int27 + $int24);
    $int42 = calc($int42 + 1);
}
if ($int28 = 1) {
    cc_deleteall($component0);
    cc_create($component0, ^iftype_graphic, 0);
    cc_setsize(0, 0, ^setsize_minus, ^setsize_minus);
    cc_setposition(0, 0, ^setpos_abs_left, ^setpos_abs_top);
    cc_setgraphic(tradebacking_light);
    cc_create($component0, ^iftype_text, 1);
    cc_setsize(0, 0, ^setsize_minus, ^setsize_minus);
    cc_setposition(0, 0, ^setpos_abs_left, ^setpos_abs_top);
    cc_settextfont(p11_full);
    cc_settextalign(^settextalign_centre, ^settextalign_centre, 0);
    cc_settextshadow(true);
    cc_setcolour($rgb15);
    cc_settext("You have a new Relic available for selection!");
}
